import{a as n,e as I,t as q,c as A}from"../chunks/B4pklceG.js";import"../chunks/CMei0t4b.js";import{M as s,f as g,N as t,O as l,n as d,a5 as J,B as G,p as K,a as Q}from"../chunks/Du4uIILg.js";import{h as o}from"../chunks/Cs1o_ong.js";import{i as X}from"../chunks/D4AmcDfz.js";import{M as Y}from"../chunks/DyuDGlf2.js";import{S as C}from"../chunks/OjqImkSQ.js";import{R as Z}from"../chunks/Dayddfh2.js";import{i as z}from"../chunks/pFiT_qqh.js";import{e as V,i as N}from"../chunks/B0BGekoV.js";import{s as W}from"../chunks/DcJyaQfQ.js";import{s as ss}from"../chunks/Cv3pZryr.js";var es=I(`<pre><code class="language-html" data-trim="" data-noescape="">
			<script type="text/template">
							<button id="mon-button">Click me</button>;
						<\/script>
			</code></pre>`),as=I(`<pre><code class="language-js" data-trim="" data-noescape="">
			<script type="text/template">
							const button = document.querySelector('#mon-button');
							button.addEventListener('click', () => {
								console.log('Button clicked!');
							});
						<\/script>
			</code></pre>`),ns=q(`<section data-auto-animate=""><h1>Qu'est-ce qu'un événement ?</h1> <blockquote data-id="anim1"><span data-id="anim1">Un événement est un signal déclenché par le navigateur,</span> <span data-id="anim1">qui peut être écouté dans du code Javascript afin d'executer une action</span>.</blockquote> <aside class="notes"><ul><li>L'utilisateur clique avec la souris sur un certain élément ou en place le curseur sur un
						certain élément.</li> <li>L'utilisateur appuie sur une touche du clavier.</li> <li>Une page web finissant de se charger.</li> <li>Un formulaire en cours de soumission</li> <li>Une vidéo en cours de lecture, en pause ou en fin de lecture.</li> <li>Une perte de connexion internet.</li></ul></aside> <!> <!></section>`),ls=I(`
							<script type="text/template">
								document.querySelector('#enfant').addEventListener('click', () => {
									console.log('Il y a eu un click dans l'élément #enfant');
								});
							<\/script>
						`,1),os=I(`
							<script type="text/template">
								document.querySelector('#parent').addEventListener('click', () => {
									console.log('Il y a eu un click dans l'élément #parent');
								});
							<\/script>
						`,1),ts=I(`
							<script type="text/template">
								document.addEventListener('click', () => {
									console.log('Il y a eu un clique quelque part sur la page');
								});
							<\/script>
						`,1),ps=q(`<pre data-id="anim1"><code class="language-js" data-trim="" data-noescape="" data-line-numbers="">
				<!>
			<!>
			<!>
</code></pre>`),rs=q(`<section data-auto-animate=""><h2>Les évènements « bouillonnent » dans le DOM</h2> <p>La plupart des évènements se propagent d'éléments en éléments, depuis la cible jusqu'à la
				racine du document</p> <pre><code class="language-html" data-trim="" data-line-numbers="">
						<div id="parent">
							<button id="enfant">Bouton</button>
						</div>;
		</code></pre> <!></section>`),cs=I(`<section><h1>Les événements du DOM</h1> <h2 class="text-pink-500">Technologie web 2</h2> <p class="text-gray-500">Johan Girod</p></section> <section></section> <section><section data-auto-animate=""><h2>\`.addEventListener(type, callback)\`</h2> <ul><li class="fragment">Est une méthode présente sur <strong>tous les éléments du DOM</strong></li> <li class="fragment"><strong><code>type</code></strong> : le type d'événement à écouter (click, mouseover, keydown,
				etc.)</li> <li class="fragment"><strong><code>callback</code></strong> : la fonction appelée lorsque l'événement est détecté</li></ul></section> <section data-auto-animate=""><h2>\`.addEventListener(type, callback)\`</h2> <pre><code class="language-js" data-trim="" data-noescape="">
			<script type="text/template">
					button.addEventListener('keydown', (event) => {
						console.log('Key pressed:', event.key);
					});
				<\/script>
		</code></pre></section></section> <section><!> <section data-auto-animate=""><h2>Accéder à l'élément cible</h2> <p>On peut toujours accéder à l'élément cible de l'évènement avec la propriété <code>event.target</code></p> <pre data-id="anim1"><code class="language-js" data-trim="" data-noescape="" data-line-numbers="">
			<script type="text/template">
					document.addEventListener('click', (event) => {
						const elementCliqué = event.target;
						elementCliqué.style.fontWeight = 'bold';
					});
				<\/script>
		</code></pre></section></section> <section><section><h1>Les différents types d'évènements</h1></section> <section><h2>Les évènements de souris</h2> <ul><li><strong><code>click</code></strong> : un clic simple</li> <li><strong><code>dblclick</code></strong> : un double clic</li> <li><strong><code>mouseenter</code></strong> : le curseur de la souris entre dans la zone de l'élément</li> <li><strong><code>mouseover</code></strong> : le curseur de la souris est dans la zone de l'élément</li> <li><strong><code>mouseleave</code></strong> : le curseur de la souris sort de la zone de l'élément</li></ul> <p class="text-gray-600">On peut récuperer la position de la souris avec les propriétés \`event.clientX\` et
			\`event.clientY\` <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent">\`MouseEvent\`</a></p></section> <section><h2>Les évènements de clavier</h2> <ul><li><strong><code>keydown</code></strong> : une touche du clavier est enfoncée</li> <li><strong><code>keyup</code></strong> : une touche du clavier est relachée</li></ul> <p class="text-gray-600">On peut récuperer la touche pressée avec la propriété <code>event.key</code> (voir la
			documentation de <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent</a>)</p></section> <section><h2>Les évènements de focus</h2> <p class="lead">Lorsque l'utilisateur interagit avec un élément, ce dernier devient "actif" et reçoit le focus</p> <div class="m-auto w-fit rounded-lg border border-slate-200 bg-slate-100 px-8 py-6"><label>Votre nom : <input type="text" id="input"></label></div> <br> <ul><li><strong><code>focus</code></strong> : l'élément reçoit le focus</li> <li><strong><code>blur</code></strong> : l'élément perd le focus</li></ul></section></section> <section><section><h1>Formulaire et évènements</h1></section> <section data-auto-animate="true"><h2>Rappel : les formulaires en HTML</h2> <pre><code class="language-html" data-trim="" data-noescape="">
			<script type="text/template">
					<form>
						<label for="nom">Nom</label>
						<input type="text" id="nom" name="nom" />

						<label for="email">Email</label>
						<input type="email" id="email" name="email" />

						<button type="submit">Envoyer</button>
					</form>;
				<\/script>
		</code></pre></section> <section><div class="m-auto w-fit rounded-lg border border-slate-200 bg-slate-100 px-8 py-6"><label>Input : <input type="text" id="input"></label></div> <h2><code>&lt;input&gt;</code> et <code>&lt;textarea&gt;</code></h2> <ul class="fragment" data-fragment-index="1"><li><strong><code>input</code></strong> : évènement lancé quand l'utilisateur tape du texte dans
				l'élément</li> <li><strong><code>change</code></strong> : lancé quand l'utilisateur a fini de taper</li> <li class="fragment" data-fragment-index="2">On peut récuperer la valeur saisie avec la propriété <strong><code>event.target.value</code></strong></li></ul> <br> <pre data-fragment-index="2" class="fragment"><code class="language-js" data-trim="" data-noescape="">
			<script type="text/template">
					input.addEventListener('input', (event) => {
						console.log(event.target.value);
					});
				<\/script>
	</code></pre> <p class=" fragment text-sm text-gray-600"><a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/input">Voir la documentation MDN</a></p></section> <section><div class="m-auto w-fit rounded-lg border border-slate-200 bg-slate-100 px-8 py-6"><label>Checkbox : <input type="checkbox"></label></div> <h2><code>&lt;input type="checkbox"&gt;</code></h2> <ul><li class="fragment"><strong><code>change</code></strong> : évènement lancé quand l'utilisateur coche ou décoche la
				case</li> <li class="fragment">On peut récuperer l'état de la case avec la propriété <code>event.target.checked</code></li> <pre class="fragment"><code class="language-js" data-trim="" data-noescape="">
			<script type="text/template">
						checkbox.addEventListener('change', (event) => {
							console.log(event.target.checked);
						});
					<\/script>
		</code></pre></ul></section> <section><div class="m-auto w-fit rounded-lg border border-slate-200 bg-slate-100 px-8 py-6"><fieldset class="flex gap-4"><legend class="text-lg">Votre choix :</legend> <label><input type="radio" name="radio"> option 1</label> <label><input type="radio" name="radio"> option 2</label> <label><input type="radio" name="radio"> option 3</label></fieldset></div> <h2><code>&lt;input type="radio"&gt;</code></h2> <ul><li class="fragment"><strong><code>change</code></strong> : évènement lancé quand l'utilisateur change d'option</li> <li class="fragment">On peut récuperer l'option choisie avec la propriété <code>event.target.checked</code></li> <li class="fragment">On peut récuperer le nom du groupe de radio avec la propriété <code>event.target.name</code></li></ul> <p class="fragment text-sm text-gray-600"><a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/input/radio">Voir la documentation sur MDN</a></p></section> <section><div class="m-auto w-fit rounded-lg border border-slate-200 bg-slate-100 px-8 py-6"><select id="select" class="w-48"><option>Option 1</option><option>Option 2</option><option>Option 3</option></select></div> <h2><code>&lt;select&gt;</code></h2> <ul><li class="fragment"><strong><code>change</code></strong> : évènement lancé quand l'utilisateur change d'option</li> <li class="fragment">On peut récuperer l'option choisie avec la propriété <code>event.target.value</code></li></ul> <pre class="fragment"><code class="language-js" data-trim="" data-noescape="">
			<script type="text/template">
					select.addEventListener('change', (event) => {
						console.log(event.target.value);
					});
				<\/script>
		</code></pre> <p class="fragment text-sm text-gray-600"><a href="https://developer.mozilla.org/fr/docs/Web/HTML/Element/select">Voir la documentation sur MDN</a></p></section></section> <section><h1>À vous de jouer !</h1> <h2>johangirod.com/cours</h2></section>`,1);function is(U){var B=cs(),_=s(g(B),2);V(_,4,()=>[0,1,2],N,($,i)=>{var u=ns(),h=s(t(u),2),F=t(h);let m;var v=s(F,2);let D;d(),l(h);var f=s(h,4);{var w=r=>{var E=es();n(r,E)};z(f,r=>{i===1&&r(w)})}var b=s(f,2);{var R=r=>{var E=as();n(r,E)};z(b,r=>{i===2&&r(R)})}l(u),J((r,E)=>{m=W(F,1,"",null,m,r),D=W(v,1,"",null,D,E)},[()=>({"opacity-50":i&&i!==1}),()=>({"opacity-50":i&&i!==2})],G),n($,u)}),l(_);var k=s(_,4),H=t(k);V(H,0,()=>[0,1,2,3],N,($,i)=>{var u=rs(),h=s(t(u),6);{var F=m=>{var v=ps(),D=t(v),f=s(t(D));{var w=c=>{var x=ls();d(2),n(c,x)};z(f,c=>{i===1&&c(w)})}var b=s(f,2);{var R=c=>{var x=os();d(2),n(c,x)};z(b,c=>{i===2&&c(R)})}var r=s(b,2);{var E=c=>{var x=ts();d(2),n(c,x)};z(r,c=>{i===3&&c(E)})}d(),l(D),l(v),n(m,v)};z(h,m=>{i!==0&&m(F)})}l(u),n($,u)}),d(2),l(k);var j=s(k,4),P=s(t(j),10),O=t(P),T=t(O),L=t(T);L.value=(L.__value="1")==null?"":"1";var M=s(L);M.value=(M.__value="2")==null?"":"2";var S=s(M);S.value=(S.__value="3")==null?"":"3",l(T),l(O),d(8),l(P),l(j),d(2),n(U,B)}var ds=q("<p>Les attributs commençant par <code>data-</code> sont des attributs personnalisés qui permettent de stocker des données supplémentaires dans un élément HTML. Ils sont très utiles pour stocker des données structurées dans une page web.</p> <p>On peut accéder à ces données directement en utilisant la propriété <code>dataset</code> de l’élément.</p> <p>Par exemple, <code>element.dataset.category</code> permet de récupérer la valeur de l’attribut <code>data-category</code> de l’élément <code>element</code>.</p>",1),ys=q('<div slot="title">Les attributs `data-&lt;*&gt;` en HTML</div>'),us=q('<p>Les boutons de tri sont des éléments <code>&lt;input type="radio"&gt;</code> qui ont comme attribut <code>name</code> la valeur “sort”. Ils sont liés entre eux grâce à cet attribut, qui permet de n’en sélectionner qu’un à la fois.</p>'),ms=q(`<!> <h2>TP 4 UrbeXplorer</h2> <p>Dans ce TP, nous allons réaliser une application web pour trouver des lieux abandonnés à explorer. Le but est de pouvoir filtrer les lieux par type, d’ajouter une recherche, et de mettre en place des tris par difficulté d’accès et par avis des utilisateurs, à partir d’une page html existante.</p> <h3>Mise en place</h3> <ol><li>Cloner le projet en utilisant la commande suivante</li></ol> <!> <p>Vous utiliserez les identifiants de votre compte universitaire pour vous connecter.</p> <p><strong>Important</strong> : Cette étape est obligatoire pour ce TP. En effet, vous sauvegarderez votre travail sur le dépôt gitlab de l’université. Vous pourrez ainsi récupérer votre travail à la prochaine séance. Si vous ne parvenez pas à cloner le projet, demandez de l’aide à votre enseignant.</p> <ol><li>Ouvrez le dossier <code>tp-4</code> dans votre éditeur de code (VSCode par exemple).</li></ol> <!> <p>Ce projet contient un fichier <code>index.html</code> et un fichier <code>script.js</code>. Le fichier <code>script.js</code> est vide. C’est dans ce fichier que vous allez écrire votre code JavaScript.</p> <p>Vous pouvez ouvrir le fichier <code>index.html</code> dans votre navigateur pour voir le rendu de la page. Elle contient une liste de lieux abandonnés à explorer, avec des images, des descriptions, des avis, etc.</p> <ol><li><strong>En fin de TP</strong>, pensez à sauvegarder votre travail sur le dépôt gitlab de l’université. Pour cela, ouvrez un terminal dans le dossier <code>tp-4</code> et tapez les commandes suivantes, en remplaçant <code>prenom</code> et <code>nom</code> par votre prénom et nom :</li></ol> <!> <!> <ol start="4"><li><strong>Pour récupérer votre travail à la prochaine séance</strong>, vous pourrez utiliser la commande suivante :</li></ol> <!> <h3>Exercice 1 : Ajouter et enlever la modale d’avertissement</h3> <p>Au tout début du fichier <code>index.html</code>, vous trouverez le code de la modale d’avertissement. Une modale est une fenêtre qui s’affiche par dessus le reste de la page. Ici, elle est implémentée en utilisant l’élément HTML <code>&lt;dialog&gt;</code>, qui est celui à utiliser pour implémenter une modale.</p> <ol><li><p>Faire en sorte que la modale s’affiche au chargement de la page :</p> <ul><li>Créer une fonction <code>displayModal</code> dans le fichier <code>script.js</code>.</li> <li>Dans cette fonction, récupérez l’élément HTML <code>&lt;dialog&gt;</code> dans une variable <code>modal</code>.</li> <li>Utilisez la méthode <code>modal.showModal()</code> pour afficher la modale.</li> <li>Appelez <code>displayModal</code>.</li></ul></li> <li><p>Faire en sorte que la modale se ferme quand on clique sur le bouton “J’ai compris”</p> <ul><li>Dans la même fonction, récupérez le noeud DOM du bouton “J’ai compris” dans une variable <code>button</code>.</li> <li>Ajoutez un écouteur d’événement “click” sur le bouton (avec la méthode <code>addEventListener</code>).</li> <li>Dans la fonction de rappel de l’écouteur d’événement, appelez la méthode <code>modal.close()</code> pour fermer la modale.</li></ul></li> <li><p>Tester que tout fonctionne correctement : la modale doit s’afficher au chargement de la page, et se fermer quand on clique sur le bouton “J’ai compris”.</p></li></ol> <p><em><strong>Astuce</strong> : pour éviter d’avoir à refermer la modale à chaque fois que vous rechargez la page pour les exercices suivants, vous pouvez commenter l’appel à la fonction <code>displayModal</code>.</em></p> <!> <h3>Exercice 2 : faire défiler les images au hover</h3> <p>Dans le fichier <code>index.html</code>, vous pourrez voir que chaque lieu est représenté par un élément <code>&lt;article&gt;</code>. Chaque article contient un titre, ainsi que plusieurs images. Seule l’image avec la classe <code>displayed</code> est visible. L’objectif de cet exercice est de faire défiler les images au survol de la souris.</p> <h4>Première étape : créer la fonction de défilement</h4> <p>Nous allons créer une fonction qui change l’image affichée à chaque fois qu’elle est appellée. Pour cela, elle déplacera la classe <code>displayed</code> sur l’image suivante.</p> <ol><li>Créer une fonction <code>loopImage</code> dans le fichier <code>script.js</code>. Cette fonction prendra en paramètre <code>article</code>, l’élément DOM <code>&lt;article&gt;</code> sur lequel elle doit opérer.</li> <li>Dans cette fonction, récupérez l’image actuellement affichée dans l’élément <code>article</code> (on pourra utiliser <code>article.querySelector</code>) dans une variable <code>currentImage</code>.</li> <li>Supprimez la classe <code>displayed</code> de l’image actuelle.</li> <li>Récupérez l’image suivante dans une variable <code>nextImage</code> (on pourra utiliser la propriété <code>nextElementSibling</code> par exemple).</li> <li>Si <code>nextElementSibling</code> est <code>null</code>, cela signifie que l’image actuelle est la dernière. Dans ce cas, faire en sorte que la variable <code>nextImage</code> contienne la première image de l’élément <code>article</code>.</li> <li>Ajoutez la classe <code>displayed</code> à l’image suivante.</li></ol> <p>Testez que cette fonction fonctionne en appelant par exemple <code>loopImage(document.querySelector('article'))</code> dans la console de votre navigateur.</p> <!> <h4>Deuxième étape : faire défiler les images</h4> <ol><li><p>Faire en sorte que les images du premier lieu défilent automatiquement chaque seconde. Pour cela, appelez-la fonction <code>loopImage</code> toute les secondes avec <code>setInterval</code></p></li> <li><p>Généraliser le défilement automatique à tous les lieux.</p></li></ol> <h4>Troisième étape : les images défilent seulement au survol de la souris</h4> <p>Nous allons maintenant faire en sorte que les images ne défilent que lorsque la souris est sur le lieu. Pour cela, nous allons utiliser les événements <code>mouseenter</code> et <code>mouseleave</code>.</p> <p><code>mouseenter</code> est déclenché quand la souris entre dans un élément, et <code>mouseleave</code> quand elle en sort.</p> <ol><li><p><strong>Débuter le défilement au survol</strong>. Ajoutez un écouteur d’événement sur chaque élément <code>&lt;article&gt;</code>, et déplacez l’appel à <code>setInterval</code> dans la fonction de rappel de cet écouteur,</p></li> <li><p><strong>Arrêter le défilement quand la souris quitte le lieu</strong>. Il vous faudra annuler le <code>setInterval</code> débuté précédement. Comment ? En utilisant la fonction <code>clearInterval</code>, avec comme paramètre l’identifiant de l’intervalle retourné par <code>setInterval</code>.</p> <!></li> <li><p>Pour plus de réactivité, vous pouvez faire en sorte que la fonction <code>loopImage</code> soit appelée immédiatement au survol de la souris, puis toute les secondes.</p></li></ol> <p>Tester que tout fonctionne correctement : les images doivent défiler au survol de la souris, et s’arrêter quand la souris quitte le lieu.</p> <!> <h3>Exercice 3 : Filtrer par catégorie de lieu</h3> <p>Chaque lieu contient des données structurées dans des attributs <code>data-</code>. Par exemple, <code>data-category</code> contient le type de lieu, <code>data-difficulty</code> contient la difficulté d’accès, etc.</p> <!> <p>L’objectif de cet exercice est de faire en sorte que l’utilisateur puisse filtrer les lieux par type.</p> <p>Le bouton de filtre est déjà présent dans le fichier <code>index.html</code>. Il est représenté par un élément <code>&lt;select&gt;</code> qui a comme id <code>category</code>.</p> <ol><li><p>Créer une fonction <code>filterByCategory</code> dans le fichier <code>script.js</code>. Cette fonction prendra le type de lieu à filtrer en paramètre. Elle devra cacher les lieux qui ne correspondent pas et afficher ceux qui correspondent.</p> <ul><li><code>filterByCategory("industriel")</code> doit cacher les lieux qui ne sont pas de type “industriel” et afficher ceux qui le sont.</li> <li><code>filterByCategory("all")</code> doit afficher tous les lieux.</li></ul> <p>Pour cacher un élément, vous pouvez utiliser la méthode <code>style.display = "none"</code>. Pour le réafficher, on utilisera <code>style.display = ""</code>.</p></li> <li><p>Tester cette fonction en appelant <code>filterByCategory('militaire')</code> dans la console de votre navigateur.</p></li> <li><p>Ajouter un écouteur d’événement “change” sur l’élément <code>&lt;select&gt;</code>. Dans la fonction de rappel de cet écouteur, appelez la fonction <code>filterByCategory</code> avec la valeur de l’élément <code>&lt;select&gt;</code> en paramètre.</p></li> <li><p>Tester que tout fonctionne correctement : les lieux doivent se filtrer en fonction du type sélectionné.</p></li></ol> <!> <h3>Exercice 4 : implémenter le tri</h3> <p>Le bouton de tri est déjà présent dans le fichier <code>index.html</code>. Il est représenté par un groupe de boutons radio qui ont pour <code>name</code> : <code>sort</code>.</p> <ol><li><p>Retrouvez l’endroit où ils sont définis. Quel élément est utilisé ? Comment sont-ils liés entre eux ?</p> <!></li> <li><p>Créer une fonction <code>sortBy</code> dans le fichier <code>script.js</code>. Cette fonction prendra le type de tri à effectuer en paramètre (on ne prend pas en compte l’ordre croissant ou décroissant pour commencer)</p> <!> <p><strong>A noter</strong> : un élément du DOM ne peut pas se retrouver à deux endroits en même temps. Pour le déplacer, il suffit juste de l’insérer à un autre endroit (il sera automatiquement retiré de son emplacement précédent).</p></li> <li><p>Tester cette fonction en appelant <code>sortBy</code> dans la console de votre navigateur. <em>**A noter : il y a une erreur dans le code HTML : la riziere n’a pas la bonne valeur pour le data-diffulty</em></p></li> <li><p>Ajouter un écouteur d’événement “change” pour les boutons de selection du tri.</p></li> <li><p>Dans la fonction de rappel de cet écouteur, récupérez la nature du tri a effectuer (difficulté ou avis)</p> <p>Pour cela, vous pouvez utiliser le selecteur <code>input[name="sort"]:checked</code>.</p> <p>Ce dernier récupère le premier élément <code>&lt;input&gt;</code> de type “radio” qui a comme attribut <code>name</code> la valeur “sort” et qui est sélectionné.</p></li> <li><p>Tester que tout fonctionne correctement : les lieux doivent se trier en fonction du type sélectionné.</p> <!></li> <li><p>Faire en sorte que les boutons pour sélectionner l’ordre croissant ou décroissant fonctionnent.</p></li></ol> <!> <h3>Exercice 5 : Ajouter une recherche</h3> <p>Pour la recherche, nous allons ajouter un élément <code>&lt;input&gt;</code> de type “text” qui a comme id <code>search</code>.</p> <p>L’objectif est de faire en sorte que l’utilisateur puisse taper un mot dans cet élément, et que les lieux qui ne contiennent pas ce mot dans leur titre soient cachés.</p> <p>Créer une fonction <code>search</code> dans le fichier <code>script.js</code>. Cette fonction prendra le mot à rechercher en paramètre, et cachera les lieux qui ne contiennent pas ce mot dans leur titre.</p> <p>Cette fonction doit être appelée à chaque fois que l’utilisateur tape une lettre dans l’élément <code>&lt;input&gt;</code>. Pour cela, ajoutez un écouteur d’événement “input” sur cet élément.</p> <!> <h3>Exercice 6 : Ajouter la distance entre l’utilisateur et le lieu et ajouter un tri par distance</h3> <ol><li>Créer une fonction qui récupère la position de l’utilisateur en utilisant la méthode <a href="https://developer.mozilla.org/fr/docs/Web/API/Geolocation/getCurrentPosition" rel="nofollow"><code>navigator.geolocation.getCurrentPosition</code></a>. Cette méthode prend en paramètre une fonction de callback qui sera appelée avec la position de l’utilisateur en paramètre.</li> <li>Modifier les lieux pour ajouter la distance entre l’utilisateur et le lieu. Pour cela, vous pouvez utiliser la méthode <code>haversine</code> (ci-dessous) qui prend en paramètre deux coordonnées géographiques et retourne la distance en kilomètres. Les coordonnées de chaque lieu sont stockées dans le dataset de l’élément <code>&lt;article&gt;</code>.</li></ol> <!> <ol start="3"><li>Ajouter une option de tri par distance dans le groupe de boutons radio. Quand cette option est sélectionnée, les lieux doivent être triés par distance croissante par rapport à la position de l’utilisateur.</li></ol> <!>`,1);function _s(U,B){K(B,!1),ss.set(!0),X();var _=ms(),k=g(_);Z(k,{children:(a,y)=>{is(a)},$$slots:{default:!0}});var H=s(k,10);o(H,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> clone</span><span style="color:#032F62"> https://sources.univ-jfc.fr/techno-web-2/tp-4.git</span></span></code></pre>');var j=s(H,8);o(j,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#005CC5">cd</span><span style="color:#032F62"> tp-4</span></span>
<span class="line"><span style="color:#6F42C1">code</span><span style="color:#032F62"> .</span></span></code></pre>`);var P=s(j,8);o(P,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> config</span><span style="color:#005CC5"> --global</span><span style="color:#032F62"> user.name</span><span style="color:#032F62"> "Votre nom"</span></span>
<span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> config</span><span style="color:#005CC5"> --global</span><span style="color:#032F62"> user.email</span><span style="color:#032F62"> "votremail@univ-jfc.fr"</span></span></code></pre>`);var O=s(P,2);o(O,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> checkout</span><span style="color:#005CC5"> -b</span><span style="color:#032F62"> prenom.nom</span></span>
<span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> add</span><span style="color:#032F62"> :/</span></span>
<span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> commit</span><span style="color:#005CC5"> -m</span><span style="color:#032F62"> "TP 4 - seance 1"</span></span>
<span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> push</span><span style="color:#005CC5"> -u</span></span></code></pre>`);var T=s(O,4);o(T,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> clone</span><span style="color:#032F62"> https://sources.univ-jfc.fr/techno-web-2/tp-4.git</span></span>
<span class="line"><span style="color:#005CC5">cd</span><span style="color:#032F62"> tp-4</span></span>
<span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> checkout</span><span style="color:#032F62"> prenom.nom</span></span></code></pre>`);var L=s(T,10);C(L,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> displayModal</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> modal</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'dialog'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	modal.</span><span style="color:#6F42C1">showModal</span><span style="color:#24292E">();</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> button</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> modal.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'button'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	button.</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'click'</span><span style="color:#24292E">, () </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">		modal.</span><span style="color:#6F42C1">close</span><span style="color:#24292E">();</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1">displayModal</span><span style="color:#24292E">();</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var M=s(L,14);C(M,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> loopImages</span><span style="color:#24292E">(</span><span style="color:#E36209">article</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> currentImage</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> article.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'img.displayed'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	currentImage.classList.</span><span style="color:#6F42C1">remove</span><span style="color:#24292E">(</span><span style="color:#032F62">'displayed'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">	let</span><span style="color:#24292E"> nextImage </span><span style="color:#D73A49">=</span><span style="color:#24292E"> currentImage.nextElementSibling;</span></span>
<span class="line"><span style="color:#6A737D">	// Si on est à la dernière image, alors &#96;nextElementSibling&#96; est &#96;null&#96;</span></span>
<span class="line"><span style="color:#D73A49">	if</span><span style="color:#24292E"> (</span><span style="color:#D73A49">!</span><span style="color:#24292E">nextImage) &#123;</span></span>
<span class="line"><span style="color:#6A737D">		// On récupère la première image</span></span>
<span class="line"><span style="color:#24292E">		nextImage </span><span style="color:#D73A49">=</span><span style="color:#24292E"> article.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'.img-container img'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	&#125;</span></span>
<span class="line"><span style="color:#24292E">	nextImage.classList.</span><span style="color:#6F42C1">add</span><span style="color:#24292E">(</span><span style="color:#032F62">'displayed'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1">loopImages</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">));</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var S=s(M,12),$=s(t(S),2),i=s(t($),2);o(i,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6A737D">// exemple</span></span>
<span class="line"><span style="color:#D73A49">const</span><span style="color:#005CC5"> intervalId</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> setInterval</span><span style="color:#24292E">(() </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">	console.</span><span style="color:#6F42C1">log</span><span style="color:#24292E">(</span><span style="color:#032F62">'Hello'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">&#125;, </span><span style="color:#005CC5">1000</span><span style="color:#24292E">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1">clearInterval</span><span style="color:#24292E">(intervalId); </span><span style="color:#6A737D">// arrête l'intervalle</span></span></code></pre>`),l($),d(2),l(S);var u=s(S,4);C(u,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">for</span><span style="color:#24292E"> (article </span><span style="color:#D73A49">of</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">)) &#123;</span></span>
<span class="line"><span style="color:#D73A49">	let</span><span style="color:#24292E"> intervalId;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">	article.</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'mouseenter'</span><span style="color:#24292E">, () </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">		intervalId </span><span style="color:#D73A49">=</span><span style="color:#6F42C1"> setInterval</span><span style="color:#24292E">(() </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#6F42C1">			loopImages</span><span style="color:#24292E">(article);</span></span>
<span class="line"><span style="color:#24292E">		&#125;, </span><span style="color:#005CC5">1000</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">	article.</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'mouseleave'</span><span style="color:#24292E">, () </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#6F42C1">		clearInterval</span><span style="color:#24292E">(intervalId);</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var h=s(u,6);Y(h,{children:(a,y)=>{var e=ds();d(4),n(a,e)},$$slots:{default:!0,title:(a,y)=>{var e=ys();n(a,e)}}});var F=s(h,8);C(F,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> filterByCategory</span><span style="color:#24292E">(</span><span style="color:#E36209">category</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articles</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Array.</span><span style="color:#6F42C1">from</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">));</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">article</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">		article.style.display </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'none'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#D73A49">		if</span><span style="color:#24292E"> (article.dataset.category </span><span style="color:#D73A49">===</span><span style="color:#24292E"> category </span><span style="color:#D73A49">||</span><span style="color:#24292E"> category </span><span style="color:#D73A49">===</span><span style="color:#032F62"> 'all'</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#24292E">			article.style.display </span><span style="color:#D73A49">=</span><span style="color:#032F62"> ''</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">		&#125;</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'select#category'</span><span style="color:#24292E">).</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'change'</span><span style="color:#24292E">, (</span><span style="color:#E36209">event</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#6F42C1">	filterByCategory</span><span style="color:#24292E">(event.target.value);</span></span>
<span class="line"><span style="color:#24292E">&#125;);</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var m=s(F,6),v=t(m),D=s(t(v),2);C(D,{children:(a,y)=>{var e=us();n(a,e)},$$slots:{default:!0}}),l(v);var f=s(v,2),w=s(t(f),2);o(w,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6A737D">// Exemple d'appel</span></span>
<span class="line"><span style="color:#6F42C1">sortBy</span><span style="color:#24292E">(</span><span style="color:#032F62">'difficulty'</span><span style="color:#24292E">); </span><span style="color:#6A737D">// tri par difficulté d'accès</span></span></code></pre>`),d(2),l(f);var b=s(f,8),R=s(t(b),2);C(R,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> sortBy</span><span style="color:#24292E">(</span><span style="color:#E36209">name</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#6A737D">	// On transforme en tableau pour pouvoir appeler la méthode &#96;sort&#96;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articles</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Array.</span><span style="color:#6F42C1">from</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">));</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">sort</span><span style="color:#24292E">((</span><span style="color:#E36209">a</span><span style="color:#24292E">, </span><span style="color:#E36209">b</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		return</span><span style="color:#24292E"> a.dataset[name] </span><span style="color:#D73A49">&#x3C;</span><span style="color:#24292E"> b.dataset[name] </span><span style="color:#D73A49">?</span><span style="color:#005CC5"> 1</span><span style="color:#D73A49"> :</span><span style="color:#D73A49"> -</span><span style="color:#005CC5">1</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articlesContainer</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'div[role="list"]'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">article</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> articlesContainer.</span><span style="color:#6F42C1">appendChild</span><span style="color:#24292E">(article));</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'input[type="radio"]'</span><span style="color:#24292E">).</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">input</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span></span>
<span class="line"><span style="color:#24292E">	input.</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'change'</span><span style="color:#24292E">, () </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> triSelectionn</span><span style="color:#24292E">é </span><span style="color:#D73A49">=</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'input[name="sort"]:checked'</span><span style="color:#24292E">).value;</span></span>
<span class="line"><span style="color:#6F42C1">		sortBy</span><span style="color:#24292E">(triSelectionné);</span></span>
<span class="line"><span style="color:#24292E">	&#125;)</span></span>
<span class="line"><span style="color:#24292E">);</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}}),l(b),d(2),l(m);var r=s(m,2);C(r,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> sortBy</span><span style="color:#24292E">(</span><span style="color:#E36209">name</span><span style="color:#24292E">, </span><span style="color:#E36209">order</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#6A737D">	// On transforme en tableau pour pouvoir appeler la méthode &#96;sort&#96;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articles</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Array.</span><span style="color:#6F42C1">from</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">));</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">sort</span><span style="color:#24292E">((</span><span style="color:#E36209">a</span><span style="color:#24292E">, </span><span style="color:#E36209">b</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		if</span><span style="color:#24292E"> (order </span><span style="color:#D73A49">===</span><span style="color:#032F62"> 'ascending'</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">			return</span><span style="color:#24292E"> a.dataset[name] </span><span style="color:#D73A49">&#x3C;</span><span style="color:#24292E"> b.dataset[name] </span><span style="color:#D73A49">?</span><span style="color:#005CC5"> 1</span><span style="color:#D73A49"> :</span><span style="color:#D73A49"> -</span><span style="color:#005CC5">1</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">		&#125; </span><span style="color:#D73A49">else</span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">			return</span><span style="color:#24292E"> a.dataset[name] </span><span style="color:#D73A49">></span><span style="color:#24292E"> b.dataset[name] </span><span style="color:#D73A49">?</span><span style="color:#005CC5"> 1</span><span style="color:#D73A49"> :</span><span style="color:#D73A49"> -</span><span style="color:#005CC5">1</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">		&#125;</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articlesContainer</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'div[role="list"]'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">article</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> articlesContainer.</span><span style="color:#6F42C1">appendChild</span><span style="color:#24292E">(article));</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'input[type="radio"]'</span><span style="color:#24292E">).</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">input</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span></span>
<span class="line"><span style="color:#24292E">	input.</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'change'</span><span style="color:#24292E">, () </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> sort</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'input[name="sort"]:checked'</span><span style="color:#24292E">).value;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> order</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'input[name="order"]:checked'</span><span style="color:#24292E">).value;</span></span>
<span class="line"><span style="color:#6F42C1">		sortBy</span><span style="color:#24292E">(sort, order);</span></span>
<span class="line"><span style="color:#24292E">	&#125;)</span></span>
<span class="line"><span style="color:#24292E">);</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var E=s(r,12);C(E,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> search</span><span style="color:#24292E">(</span><span style="color:#E36209">query</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articles</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Array.</span><span style="color:#6F42C1">from</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">));</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">article</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> title</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> article.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'h3'</span><span style="color:#24292E">).textContent;</span></span>
<span class="line"><span style="color:#D73A49">		if</span><span style="color:#24292E"> (</span><span style="color:#D73A49">!</span><span style="color:#24292E">title.</span><span style="color:#6F42C1">toLowerCase</span><span style="color:#24292E">().</span><span style="color:#6F42C1">includes</span><span style="color:#24292E">(query.</span><span style="color:#6F42C1">toLowerCase</span><span style="color:#24292E">())) &#123;</span></span>
<span class="line"><span style="color:#24292E">			article.style.display </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'none'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">		&#125;</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> resetFilter</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> articles</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Array.</span><span style="color:#6F42C1">from</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">));</span></span>
<span class="line"><span style="color:#24292E">	articles.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">article</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">		article.style.display </span><span style="color:#D73A49">=</span><span style="color:#032F62"> ''</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> updateFilter</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#6F42C1">	resetFilter</span><span style="color:#24292E">();</span></span>
<span class="line"><span style="color:#6F42C1">	filterByCategory</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'select#category'</span><span style="color:#24292E">).value);</span></span>
<span class="line"><span style="color:#6F42C1">	search</span><span style="color:#24292E">(document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'input#search'</span><span style="color:#24292E">).value);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'input#search'</span><span style="color:#24292E">).</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'input'</span><span style="color:#24292E">, updateFilter);</span></span>
<span class="line"><span style="color:#24292E">document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'select#category'</span><span style="color:#24292E">).</span><span style="color:#6F42C1">addEventListener</span><span style="color:#24292E">(</span><span style="color:#032F62">'change'</span><span style="color:#24292E">, updateFilter);</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var c=s(E,6);o(c,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> haversine</span><span style="color:#24292E">([</span><span style="color:#E36209">lat1</span><span style="color:#24292E">, </span><span style="color:#E36209">lon1</span><span style="color:#24292E">], [</span><span style="color:#E36209">lat2</span><span style="color:#24292E">, </span><span style="color:#E36209">lon2</span><span style="color:#24292E">]) &#123;</span></span>
<span class="line"><span style="color:#6F42C1">	toRad</span><span style="color:#D73A49"> =</span><span style="color:#D73A49"> function</span><span style="color:#24292E"> (</span><span style="color:#E36209">n</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">		return</span><span style="color:#24292E"> (n </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#005CC5">PI</span><span style="color:#24292E">) </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 180</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125;;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> R</span><span style="color:#D73A49"> =</span><span style="color:#005CC5"> 6371</span><span style="color:#24292E">; </span><span style="color:#6A737D">// km</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> x1</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> lat2 </span><span style="color:#D73A49">-</span><span style="color:#24292E"> lat1;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> dLat</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> toRad</span><span style="color:#24292E">(x1);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> x2</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> lon2 </span><span style="color:#D73A49">-</span><span style="color:#24292E"> lon1;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> dLon</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> toRad</span><span style="color:#24292E">(x2);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> a</span><span style="color:#D73A49"> =</span></span>
<span class="line"><span style="color:#24292E">		Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLat </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLat </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">) </span><span style="color:#D73A49">+</span></span>
<span class="line"><span style="color:#24292E">		Math.</span><span style="color:#6F42C1">cos</span><span style="color:#24292E">(</span><span style="color:#6F42C1">toRad</span><span style="color:#24292E">(lat1)) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">cos</span><span style="color:#24292E">(</span><span style="color:#6F42C1">toRad</span><span style="color:#24292E">(lat2)) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLon </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLon </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> c</span><span style="color:#D73A49"> =</span><span style="color:#005CC5"> 2</span><span style="color:#D73A49"> *</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">atan2</span><span style="color:#24292E">(Math.</span><span style="color:#6F42C1">sqrt</span><span style="color:#24292E">(a), Math.</span><span style="color:#6F42C1">sqrt</span><span style="color:#24292E">(</span><span style="color:#005CC5">1</span><span style="color:#D73A49"> -</span><span style="color:#24292E"> a));</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> d</span><span style="color:#D73A49"> =</span><span style="color:#005CC5"> R</span><span style="color:#D73A49"> *</span><span style="color:#24292E"> c;</span></span>
<span class="line"><span style="color:#D73A49">	return</span><span style="color:#24292E"> d;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`);var x=s(c,4);C(x,{children:(a,y)=>{var e=A(),p=g(e);o(p,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">navigator.geolocation.</span><span style="color:#6F42C1">getCurrentPosition</span><span style="color:#24292E">((</span><span style="color:#E36209">position</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">	document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'article'</span><span style="color:#24292E">).</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">article</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> lat</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Number.</span><span style="color:#6F42C1">parseFloat</span><span style="color:#24292E">(article.dataset.lat);</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> lon</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Number.</span><span style="color:#6F42C1">parseFloat</span><span style="color:#24292E">(article.dataset.lng);</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> distance</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> haversine</span><span style="color:#24292E">([position.coords.latitude, position.coords.longitude], [lat, lon]);</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> distanceSpan</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">createElement</span><span style="color:#24292E">(</span><span style="color:#032F62">'span'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">		article.dataset.distance </span><span style="color:#D73A49">=</span><span style="color:#24292E"> distance;</span></span>
<span class="line"><span style="color:#24292E">		distanceSpan.textContent </span><span style="color:#D73A49">=</span><span style="color:#032F62"> &#96;Distance : $&#123;</span><span style="color:#24292E">Math</span><span style="color:#032F62">.</span><span style="color:#6F42C1">round</span><span style="color:#032F62">(</span><span style="color:#24292E">distance</span><span style="color:#032F62">)</span><span style="color:#032F62">&#125; km&#96;</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">		article.</span><span style="color:#6F42C1">appendChild</span><span style="color:#24292E">(distanceSpan);</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> haversine</span><span style="color:#24292E">([</span><span style="color:#E36209">lat1</span><span style="color:#24292E">, </span><span style="color:#E36209">lon1</span><span style="color:#24292E">], [</span><span style="color:#E36209">lat2</span><span style="color:#24292E">, </span><span style="color:#E36209">lon2</span><span style="color:#24292E">]) &#123;</span></span>
<span class="line"><span style="color:#6F42C1">	toRad</span><span style="color:#D73A49"> =</span><span style="color:#D73A49"> function</span><span style="color:#24292E"> (</span><span style="color:#E36209">n</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">		return</span><span style="color:#24292E"> (n </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#005CC5">PI</span><span style="color:#24292E">) </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 180</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125;;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> R</span><span style="color:#D73A49"> =</span><span style="color:#005CC5"> 6371</span><span style="color:#24292E">; </span><span style="color:#6A737D">// km</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> x1</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> lat2 </span><span style="color:#D73A49">-</span><span style="color:#24292E"> lat1;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> dLat</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> toRad</span><span style="color:#24292E">(x1);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> x2</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> lon2 </span><span style="color:#D73A49">-</span><span style="color:#24292E"> lon1;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> dLon</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> toRad</span><span style="color:#24292E">(x2);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> a</span><span style="color:#D73A49"> =</span></span>
<span class="line"><span style="color:#24292E">		Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLat </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLat </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">) </span><span style="color:#D73A49">+</span></span>
<span class="line"><span style="color:#24292E">		Math.</span><span style="color:#6F42C1">cos</span><span style="color:#24292E">(</span><span style="color:#6F42C1">toRad</span><span style="color:#24292E">(lat1)) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">cos</span><span style="color:#24292E">(</span><span style="color:#6F42C1">toRad</span><span style="color:#24292E">(lat2)) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLon </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">) </span><span style="color:#D73A49">*</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">sin</span><span style="color:#24292E">(dLon </span><span style="color:#D73A49">/</span><span style="color:#005CC5"> 2</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> c</span><span style="color:#D73A49"> =</span><span style="color:#005CC5"> 2</span><span style="color:#D73A49"> *</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">atan2</span><span style="color:#24292E">(Math.</span><span style="color:#6F42C1">sqrt</span><span style="color:#24292E">(a), Math.</span><span style="color:#6F42C1">sqrt</span><span style="color:#24292E">(</span><span style="color:#005CC5">1</span><span style="color:#D73A49"> -</span><span style="color:#24292E"> a));</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> d</span><span style="color:#D73A49"> =</span><span style="color:#005CC5"> R</span><span style="color:#D73A49"> *</span><span style="color:#24292E"> c;</span></span>
<span class="line"><span style="color:#D73A49">	return</span><span style="color:#24292E"> d;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}}),n(U,_),Q()}export{_s as component};
