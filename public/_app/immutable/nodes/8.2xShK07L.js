import{a as n,e as W,t as m,c as u}from"../chunks/B4pklceG.js";import"../chunks/CMei0t4b.js";import{M as s,f as c,N as t,O as p,n as d,p as V,a as K}from"../chunks/Du4uIILg.js";import{h as l}from"../chunks/Cs1o_ong.js";import{i as X}from"../chunks/D4AmcDfz.js";import{S as i}from"../chunks/OjqImkSQ.js";import{R as Y}from"../chunks/Dayddfh2.js";import{s as H}from"../chunks/BMkXc6el.js";import{M as I}from"../chunks/DyuDGlf2.js";import{s as Z}from"../chunks/Cv3pZryr.js";const ee=""+new URL("../assets/dom.BrvoYPlw.png",import.meta.url).href,se=""+new URL("../assets/rendering_pipeline.CdKLygpi.png",import.meta.url).href;var ae=W(`<section><h1>Manipulation du DOM</h1> <h2 class="text-pink-500">Technologie web 2</h2> <p class="text-gray-500">Johan Girod</p></section> <section><section data-auto-animate="true"><h1>Rappel sur les éléments HTML</h1></section> <section><h2>Squelette d'un document HTML</h2> <ul><li>Un document HTML est composé d'éléments imbriqués les uns dans les autres</li> <li>Ces éléments sont délimités par des balises ouvrantes et fermantes.</li> <li>Les éléments racines sont <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> et <code>&lt;body&gt;</code></li></ul> <h3>Exemple de document</h3> <pre><code class="language-html" data-trim="">
<script type="text/template">
					<html>
						<head>
							<title>Titre de la page</title>
						</head>
						<body>
							<h1>Mon titre</h1>
							<p>
								Un paragraphe
								<img src="image.jpg" alt="Une image" />
							</p>
						</body>
					</html>;
				<\/script>
	</code></pre></section> <section><h2>Que trouve-t-on dans la balise <code>&lt;head&gt;</code> ?</h2> <div class="fragment lead text-2xl"><strong>Des métadonnées</strong> (tout ce qui n'est pas visible sur la page)</div> <ul class="fragment"><li>Le titre de la page <code>&lt;title&gt;</code></li> <li>Les feuilles de style <code>&lt;link rel="stylesheet" href="style.css"&gt;</code></li> <li>La description <code>&lt;meta name="description" content="..."&gt;</code></li> <li>L'encodage du document <code>&lt;meta charset="utf-8"&gt;</code></li> <li>Et bien d'autres (favicon, scripts, données pour les réseaux sociaux, etc.)</li></ul></section> <section><style>.fragment.grow-width {
				display: inline-flex;
				width: 0;
				opacity: 0;
				overflow: hidden;
				max-width: 0;
				transition: all 0.5s;
				white-space: nowrap;
			}
			.fragment.grow-width.visible {
				width: auto;
				width: calc-size(auto);
				opacity: 1;
				max-width: 400px;
			}</style> <h2>Anatomie d'une balise</h2> <div class="flex flex-col items-center gap-8"><div class="font-mono text-3xl"><span class="fragment custom grow-width" data-fragment-index="1">&lt;<span class="font-bold text-blue-500">a</span> <span class="fragment custom grow-width" data-fragment-index="3"><span class="ml-2"><span class="italic text-purple-500">class</span>=<span class="text-green-500">"ma-class"</span></span> <span class="ml-2"><span class="italic text-purple-500">href</span>=<span class="text-green-500">"/"</span></span></span> &gt;</span> <span class="fragment custom grow-width mx-2" data-fragment-index="2">Revenir à l'accueil</span> <span class="fragment custom grow-width" data-fragment-index="1">&lt;/<span class="font-bold text-blue-500">a</span>&gt;</span></div> <div class="text-2xl italic text-gray-600"><span class="fragment custom grow-width" data-fragment-index="1">Nom de l'élément</span> <span class="fragment custom grow-width" data-fragment-index="3">⋅ Attributs</span> <span class="fragment custom grow-width" data-fragment-index="2">⋅ Contenu</span></div></div></section></section> <section><section data-auto-animate="true"><h1>Qu'est-ce que le DOM ?</h1></section> <section data-auto-animate="true"><h1>Qu'est-ce que le DOM ?</h1> <p class="lead" style="font-size: 1.8rem; line-height: 1.5">Le DOM (Document Object Model) est une <strong>interface de programmation pour manipuler des documents HTML</strong> en Javascript</p> <br> <ul class="small text-gray-600"><li class="fragment">Le document HTML est représenté sous <strong>forme d'arbre</strong></li> <li class="fragment"><strong>Tous les navigateurs</strong> implémentent le DOM</li> <li class="fragment">Les scripts JavaScript l'utilisent pour <strong>lire et modifier</strong> le document HTLM</li></ul></section> <section data-auto-animate=""><h2>Le document est représenté sous forme d'arbre</h2> <pre><code class="language-html" data-trim="">
<script type="text/template">
					<html>
						<head>
							<title>My title</title>
						</head>
						<body>
							<h1>A heading</h1>
							<a href="/">Link text</a>
						</body>
					</html>;
				<\/script>
</code></pre></section> <section data-auto-animate=""><h2>Le document est représenté sous forme d'arbre</h2> <img alt="DOM tree" class="r-stretch"></section> <section><h2>Le DOM est implémentée par les navigateurs</h2> <div class="r-stretch"><img alt="Rendering pipeline : parsing, render tree, layout, paint" class="fragment"></div> <p class="fragment text-4xl"><strong>C'est l'étape de parsing</strong> (ou analyse syntaxique)</p> <div class="fragment"><h3>Ressources</h3> <ul><li><a href="https://developer.chrome.com/blog/inside-browser-part3">Comment fonctionne le rendu sur chrome ? (en anglais)</a></li> <li><a href="https://developer.mozilla.org/fr/docs/Web/Performance/How_browsers_work">Comment fonctionne un navigateur ?</a></li></ul></div></section> <section><h2>Accéder au DOM en JavaScript</h2> <p>Le DOM est accessible via l'objet global <code>document</code></p> <pre class="fragment"><code class="language-js" data-trim="">
			<script type="text/template">
					document.write('Hello world');
				<\/script>
			
</code></pre> <p class="fragment">Cet objet contient des <strong>propriétés et des méthodes</strong> pour manipuler le document</p> <pre class="fragment"><code class="language-js" data-trim="">
			<script type="text/template">
					document.title = 'Mon nouveau titre';
				<\/script>
	</code></pre></section></section> <section><section><h1>L'API du DOM</h1></section> <section><h2>Récupérer un élément (noeud de l'arbre)</h2> <h3 style="font-size: 2rem"><code>document.querySelector("...")</code></h3> <br> <pre><code class="language-js" data-trim="">
			>
<script type="text/template">
					document.querySelector('h1');
					document.querySelector('#my-id');
					document.querySelector('p.lead > strong');
				<\/script>
</code></pre> <p class="text-gray-600">Renvoie le premier élément correspondant au sélecteur CSS. <br>Retourne <code>null</code> si
			aucun élément n'est trouvé.</p></section> <section data-auto-animate=""><h2 data-id="text"><span>Lire le contenu</span></h2> <h3>Code HTML</h3> <pre><code class="language-html" data-trim="">
		<script type="text/template">
					<h1>
						Hello <em>world</em>y
					</h1>;
				<\/script>
		</code></pre> <h3>Code JavaScript</h3> <pre data-id="pre-code">			<code class="language-js" data-trim="">
				<script type="text/template">
					// 1. Récupérer l'élément h1 dans la variable element
					const element = document.querySelector('h1');

					// 2. Lire les informations
					const titre = element.textContent; // "Hello world"
					const titreHTML = element.innerHTML; // "Hello <em>world</em>"
				<\/script>
			</code>
		</pre></section> <section data-auto-animate=""><h2 data-id="text">Modifier le contenu</h2> <h3>Code HTML</h3> <pre><code class="language-html" data-trim="">
		<script type="text/template">
					<h1>
						Hello <em>world</em>y
					</h1>;
				<\/script>
		</code></pre> <h3>Code JavaScript</h3> <pre data-id="pre-code">			<code class="language-js" data-trim="">
				<script type="text/template">
					// Méthode préférée : remplacer le contenu texte
					element.textContent = 'Hello Jonhy';

					// Remplace le HTML (à utiliser avec précaution)
					element.innerHTML = 'Hello <em>you!</em>';
				<\/script>
			</code>
		</pre></section> <section><h2 data-id="text">Lire et modifier les classes CSS</h2> <h3>Code HTML</h3> <pre><code class="language-html" data-trim="">
				<script type="text/template">
					<h1 class="text-4xl text-pink-500">Titre</h1>;
				<\/script>
					</code></pre> <h3>Code JavaScript</h3> <pre><code class="language-js" data-trim="">
						<script type="text/template">
					const classes = element.classList;
					// ["text-4xl", "text-pink-500"] (liste des classes)

					const isPink = classes.contains('text-pink-500'); // true
				<\/script>
						</code></pre> <pre class="fragment"><code class="language-js" data-trim="">
		<script type="text/template">
					element.classList.add('font-bold'); // Ajoute la classe
					element.classList.remove('text-4xl'); // Supprime la classe
					element.classList.toggle('text-pink-500');
				<\/script>
	</code></pre></section> <section data-auto-animate=""><h2 data-id="text">Lire et modifier le style CSS</h2> <h3>Code JavaScript</h3> <pre data-id="pre-code"><code class="language-js" data-trim="">
	const color = element.style.color;

	element.style.fontSize = '2rem';
		</code></pre></section> <section data-auto-animate=""><h2 data-id="text">Lire et modifier des attributs</h2> <h3>Code JavaScript</h3> <pre data-id="pre-code"><code class="language-js" data-trim="">
	/* Lire et modifier les attributs : méthode générique */
	const placeholder = element.getAttribute('placeholder'); 
	element.setAttribute('src', 'image.jpg');

	/* Lire et modifier les attributs : accesseur direct
	 (dans certains cas seulement) */
	const valeur = input.value;
	a.href = 'https://google.com';
	</code></pre></section> <section><h2>Ajouter des nouveaux noeuds dans le DOM</h2> <h3>1. Créer un noeud</h3> <pre data-id="pre-code"><code class="language-js" data-trim="">
			<script type="text/template">
					const myImg = document.createElement('img');
					myImg.src = 'https://picsum.photos/200/300';
					myImg.alt = 'Random image';
				<\/script>
		</code></pre> <div class="fragment"><h3>2. Insérer un noeud</h3> <pre data-id="pre-code"><code class="language-js" data-trim="">
			<script type="text/template">
						// En fin de page
						document.body.appendChild(myImg);

						// A la fin d'un élément
						const p = document.querySelector('p');
						p.appendChild(myLink);
					<\/script>
	</code></pre></div> <p class="fragment"><strong class="text-pink-500">Attention !</strong> Un noeud doit être inséré pour être visible
			sur la page. Sinon, il n'existe que dans la mémoire de l'ordinateur.</p></section> <section><h2>Supprimer, cloner, remplacer un élément</h2> <pre><code class="language-js" data-trim="">
			<script type="text/template">
					/* Supprimer un noeud */
					element.remove();

					/* Cloner un noeud */
					const newHeading = document.querySelector('h1').cloneNode();

					/* Remplacer un noeud */
					newHeading.textContent = 'Hello world';
					document.querySelector('h1').replaceWith(newHeading);
				<\/script>
	</code></pre></section> <section><h2>Se déplacer dans le DOM</h2> <p>Le DOM est un arbre, on peut se déplacer d'un noeud à l'autre avec les propriétés suivantes :</p> <pre><code class="language-js" data-trim="">
		<script type="text/template">
					elem.previousElementSibling; // Le noeud précédent
					elem.nextElementSibling; // Le noeud suivant
					elem.parentElement; // Le noeud parent
					elem.firstChild; // Le premier noeud enfant
					elem.lastChild; // Le dernier noeud enfant
					elem.children; // Tous les noeuds enfants
				<\/script>
	</code></pre></section> <section><h2>Récupérer une liste d'élément</h2> <h3 style="font-size: 2rem"><code>document.querySelectorAll("...")</code></h3> <br> <pre><code class="language-js" data-trim="">
			>
<script type="text/template">
					const imgList = document.querySelectorAll('img');
					const firstImg = imgList[0];
				<\/script>
</code></pre> <p class="text-gray-600">Renvoie une collection (<code>NodeList</code>) de tous les éléments correspondant au sélecteur
			CSS.</p> <pre class="fragment"><code class="language-js" data-trim="">
			<script type="text/template">
					// Parcourir la liste : méthode fonctionelle
					imgList.forEach((img) => {
						img.classList.add('border-2');
					});

					// Parcourir la liste : méthode itérative
					for (const img of imgList) {
						img.classList.add('border-2');
					}
				<\/script>
	</code></pre></section> <section><h2><code>NodeList</code> : pas tout à fait un tableau</h2> <p>L'objet retourné par <code>querySelectorAll</code> n'est <strong>pas un tableau JavaScript classique</strong>.</p> <p>Pour utiliser les méthodes de tableau (<code>filter</code>, <code>find</code> etc.), il faut
			d'abord le <strong>convertir en tableau</strong>&nbsp;:</p> <pre><code class="language-js" data-trim="">
			<script type="text/template">
					const imgNodeList = document.querySelectorAll('img');
					const imgArray = Array.from(imgNodeList);
				<\/script>
	</code></pre></section></section> <section><h1>À vous de jouer !</h1> <h2>johangirod.com/cours</h2></section>`,1);function oe(F){var E=ae(),g=s(c(E),4),y=s(t(g),6),v=s(t(y),2);H(v,"src",ee),p(y);var f=s(y,2),h=s(t(f),2),C=t(h);H(C,"src",se),p(h),d(4),p(f),d(2),p(g),d(4),n(F,E)}var ne=m('<p>Pour sauvegarder votre travail sur votre compte Gitlab, vous devez d’abord créer une bifurcation (fork) du repo.</p> <p><a href="https://sources.univ-jfc.fr/techno-web-2/tp-2/-/forks/new" rel="nofollow">Cliquez ici pour créer une bifurcation</a>.</p> <p>Une fois le repo créée, vous pourrez le cloner en utilisant l’URL fournie par Gitlab (bouton bleu « Code »).</p>',1),le=m('<div slot="title">Utilisation de Gitlab pour sauvegarder votre travail (facultatif)</div>'),te=m("<p>La variable <code>$0</code> contient le noeud DOM correspondant à l’élément HTML sélectionné dans l’inspecteur.</p> <p>En cliquant sur un autre élément, la variable <code>$0</code> pointe vers le nouvel élément sélectionné.</p>",1),pe=m("<p>Car le contenu du <code>&lt;body&gt;</code> n’a pas encore été parsé par le navigateur, et l’abre DOM associé n’a pas été crée. Les fonctions de manipulation du DOM comme <code>document.querySelector</code> ne fonctionneront pas comme attendu.</p>"),re=m("<p><code>defer</code> est un attribut booléen qui indique au navigateur de différer l’exécution du script après le chargement de la page. Cela permet de garantir</p> <ul><li>que le script ne bloque pas le rendu de la page</li> <li>que les éléments du DOM sont bien chargés avant l’exécution du script</li></ul> <p>Sans cet attribut, le script est exécuté au moment où il est rencontré dans le fichier HTML, ce qui peut poser des problèmes si le script est placé dans le <code>&lt;head&gt;</code>.</p> <p><strong>Pourquoi ?</strong></p> <!> <br>",1),ce=m('<div slot="title">L\'attribut `defer`</div>'),ie=m(`<!> <h2>Exercices / TP</h2> <h3>Mise en place</h3> <p>Ce TP est disponible sur gitlab. Vous pouvez le cloner avec la commande suivante :</p> <!> <p>Utilisez les identifiants de votre compte universitaire pour vous connecter.</p> <!> <p>Ouvrez le dossier <code>tp-2</code> dans votre éditeur de code (VSCode par exemple).</p> <p>Ce projet contient un fichier <code>index.html</code>.</p> <p>Ouvrez le fichier <code>index.html</code> dans votre navigateur (double-cliquez sur le fichier) pour voir le résultat de votre travail.</p> <h3>Exercice 1 : modifier un élément avec la console</h3> <p>Pour commencer, nous allons nous familiariser avec la modification du DOM en utilisant la console du navigateur.</p> <ul><li><p>Faire un clique droit sur la page et sélectionner « Inspecter » dans le menu contextuel. Cela ouvre l’inspecteur du navigateur et affiche le code HTML correspondant.</p></li> <li><p>Cliquez sur l’onglet console et tapez la commande suivante :</p> <!> <p>Que contient la variable <code>$0</code> ? Cliquez sur un autre élément dans l’inspecteur et de taper la commande <code>$0</code> à nouveau. Que remarquez-vous ?</p> <!></li></ul> <ol><li><p>Faire en sorte que <code>$0</code> pointe vers le noeud DOM <code>&lt;p&gt;</code> qui contient le texte « Bonjour tout le monde ! ». Vous pouvez vous aider du bouton « selection » en haut à gauche de l’inspecteur (sous forme de pointeur de souris). Il vous permet de selectionner un élement directement depuis la page web.</p></li> <li><p>Dans la console, tapez la commande suivante pour changer le texte de l’élément sélectionné :</p> <!></li> <li><p>Changez la couleur du texte en rouge en utilisant la propriété <code>style</code> de l’élément (comme vu dans le cours).</p></li> <li><p>Supprimer le noeud de la page en utilisant la méthode <code>remove()</code>.</p></li></ol> <h3>Exercice 2 : modifier un élément avec du code JavaScript</h3> <p>Nous allons réaliser une diapositive d’images qui changent toutes les 2 secondes.</p> <ol><li><p>Pour commencer, créer un fichier <code>script.js</code>, et faire en sorte qu’il soit exécuté au chargement de la page.
Pour cela, il faudra ajouter un lien grâce à la balise <code>&lt;script&gt;</code> dans le <code>&lt;head&gt;</code> du fichier <code>index.html</code>.</p> <!> <!></li> <li><p>Dans le fichier <code>script.js</code>, récuperez le l’élément DOM existant de l’image dans une variable <code>imageNode</code>. Le noeud HTML est une image <code>img</code> avec pour id <code>diapo</code>.</p></li> <li><p>Créez une fonction <code>changeImage()</code> qui change l’attribut <code>src</code> de l’image pour pointer vers image aléatoire.</p> <p>Dans la fonction, générez un id aléatoire entre 1 et 500 et utilisez cet id pour construire l’url de l’image. Par exemple, si l’id aléatoire est 3, l’url vers la nouvelle image sera <code>https://picsum.photos/id/3/400/400</code>.</p> <p>Changez l’attribut <code>src</code> de l’image pour pointer vers cette nouvelle url.</p></li> <li><p>Appelez la fonction <code>changeImage()</code> toutes les 2 secondes en utilisant la fonction <a href="https://developer.mozilla.org/fr/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" rel="nofollow"><code>setInterval</code></a>.</p> <!></li></ol> <!> <h3>Exercice 3 : Modifier le style d’éléments avec du code JavaScript</h3> <p>Écrire un script qui cache tous les éléments avec la class <code>hidden</code> par un rectangle noir (on pourra utiliser l’attribut <code>style</code> pour changer la couleur de fond).</p> <!> <h3>Exercice 4 : Un memory en JavaScript</h3> <p>Nous allons développer un petit jeu de mémoire.</p> <p>Le but est de faire apparaitre 5 cartes contenant des emojis aléatoires pendant 10 secondes. Ensuite, les emojis disparaissent et on pose la question à l’utilisateur : « Sous quelle carte se trouve l’emoji X ? ».</p> <h4>1. Selections des emojis</h4> <p>Créez une fonction <code>getRandomEmojis()</code> qui retourne un tableau de 5 emojis aléatoires. Pour cela vous pourrez utiliser le tableau de base suivant :</p> <!> <p>Cette fonction peut être implémentée de la manière suivante :</p> <ul><li>Créer un tableau vide <code>randomEmojis</code></li> <li>Tant que la longueur de <code>randomEmojis</code> est inférieure à 5 : <ul><li>Générer un index aléatoire entre 0 et la longueur du tableau <code>emojis</code></li> <li>Récupérer l’emoji correspondant à cet index</li> <li>Si l’emoji n’est pas déjà dans <code>randomEmojis</code>, l’ajouter</li></ul></li> <li>Une fois que <code>randomEmojis</code> contient 5 emojis, retourner le tableau</li></ul> <p>Testez cette fonction en l’appelant avec <code>console.log(getRandomEmojis())</code>, et vérifiez que 5 emojis différents sont affichés dans la console du navigateur.</p> <!> <h4>2. Affichage des emojis</h4> <p>Creer une fonction <code>displayCards(emojis)</code> qui prend en paramètre un tableau d’emojis et qui les affiche dans le navigateur, en les ajoutant à la liste ordonnée (<code>ol</code>) avec l’id <code>emoji-game</code>.</p> <ul><li>Selectionnez cet élément dans une variable <code>emojisContainer</code> grâce à la fonction <code>document.querySelector</code>.</li> <li>Réinitialisez le contenu de cet élément avec la propriété <code>innerHTML</code> à une chaîne vide.</li> <li>Pour chaque emoji du tableau passé en argument <ul><li>créer un élément <code>li</code> avec <code>document.createElement</code></li> <li>modifier son contenu avec la propriété <code>textContent</code></li> <li>ajouter cet élément à <code>emojisContainer</code> avec la méthode <code>appendChild</code></li></ul></li></ul> <p>Testez cette fonction en appelant <code>displayCards(getRandomEmojis())</code>. Vous devriez voir les emojis s’afficher dans le navigateur.</p> <!> <h4>3. Cacher les emojis</h4> <p>Créer une fonction <code>hideEmojis</code> qui cache le contenu en modifiant la couleurd de chacune des cartes à <code>transparent</code>.</p> <p>Pour sélectionner les cartes, on pourra utiliser la méthode <code>querySelectorAll</code> avec le sélecteur CSS approprié.</p> <p>Testez cette fonction en appelant <code>hideEmojis</code> après avoir affiché les emojis.</p> <!> <h4>4. Poser une question à l’utilisateur</h4> <p>Créer une fonction <code>askQuestion</code> avec les spécifications suivantes : , et pose la question à l’utilisateur : « Quelle est le numéro de la carte avec l’emoji <x>? » (avec <x>l’emoji choisie).</x></x></p> <ul><li>Cette fonction prend en paramètre le tableau des emojis affichés.</li> <li>Un emoji est choisi aléatoirement dans ce tableau.</li> <li>On pose à l’utilisateur la question « Quelle est le numéro de la carte avec l’emoji <x>? ». (avec <x>l’emoji choisie). On pourra utiliser la fonction <code>prompt</code> pour cela.</x></x></li> <li>Si l’utilisateur répond correctement, la fonction affiche un message de félicitation : <ul><li>Ajoutez une classe <code>success</code> à la liste ordonnée contenant les emojis (cela lancera une animation CSS).</li> <li>Ajouter un message de félicitation dans la <code>div</code> avec l’id <code>emoji-game-message</code> (par exemple : « Bravo 🎉 ! »).</li></ul></li> <li>Si l’utilisateur répond incorrectement, alors réafficher tous les emojis et afficher un message d’échec dans la <code>div</code> avec l’id <code>emoji-game-message</code> (par exemple : « Perdu 😔 »).</li></ul> <p>Testez que la fonction <code>askQuestion</code> fonctionne en l’appelant avec un tableau d’emojis (vous pouvez afficher la solution dans le texte de la question pour tester le cas où l’utilisateur répond correctement).</p> <!> <h4>5. Assemblage du jeu</h4> <ol><li><p>Créer une fonction <code>startGame</code> qui appelle successivement les fonctions <code>getRandomEmojis</code> et <code>displayEmojis</code>.</p></li> <li><p>Utilisez la fonction <code>setTimeout</code> pour appeler la fonction <code>hideEmojis</code> après 5 secondes.</p> <!></li> <li><p>Utilisez la fonction <code>setTimeout</code> pour appeler la fonction <code>askQuestion</code> après 5 secondes et 100 millisecondes.</p></li> <li><p>Appelez la fonction <code>startGame</code> pour lancer le jeu.</p></li></ol> <!> <h4>6. Pour aller plus loin</h4> <ol><li><p>Faire en sorte que le jeu boucle tant que l’utilisateur ne trouve pas la bonne réponse, en affichant les emojis pendant 5 secondes puis en posant une nouvelle question.</p></li> <li><p>Faire en sorte que le jeu augmente en difficulté à chaque fois que l’utilisateur trouve la bonne réponse, en ajoutant un emoji supplémentaire à chaque tour. Afficher un compteur de niveau. Si l’utilisateur se trompe, le niveau est réinitialisé à 1.</p></li></ol>`,1);function be(F,E){V(E,!1),Z.set(!0),X();var g=ie(),y=c(g);Y(y,{children:(a,r)=>{oe(a)},$$slots:{default:!0}});var v=s(y,8);l(v,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">git</span><span style="color:#032F62"> clone</span><span style="color:#032F62"> https://sources.univ-jfc.fr/techno-web-2/tp-2.git</span></span></code></pre>');var f=s(v,4);I(f,{children:(a,r)=>{var e=ne();d(4),n(a,e)},$$slots:{default:!0,title:(a,r)=>{var e=le();n(a,e)}}});var h=s(f,12),C=s(t(h),2),D=s(t(C),2);l(D,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">$0;</span></span></code></pre>');var O=s(D,4);i(O,{showAnyway:!0,children:(a,r)=>{var e=te();d(2),n(a,e)},$$slots:{default:!0}}),p(C),p(h);var b=s(h,2),q=s(t(b),2),R=s(t(q),2);l(R,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">$0.textContent </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'Bonjour les amis !'</span><span style="color:#24292E">;</span></span></code></pre>`),p(q),d(4),p(b);var x=s(b,6),j=t(x),S=s(t(j),2);l(S,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">&#x3C;</span><span style="color:#22863A">script</span><span style="color:#6F42C1"> defer</span><span style="color:#6F42C1"> src</span><span style="color:#24292E">=</span><span style="color:#032F62">"./script.js"</span><span style="color:#24292E">>&#x3C;/</span><span style="color:#22863A">script</span><span style="color:#24292E">></span></span></code></pre>');var N=s(S,2);I(N,{children:(a,r)=>{var e=re(),o=s(c(e),8);i(o,{showAnyway:!0,children:(G,de)=>{var B=pe();n(G,B)},$$slots:{default:!0}}),d(2),n(a,e)},$$slots:{default:!0,title:(a,r)=>{var e=ce();n(a,e)}}}),p(j);var L=s(j,6),U=s(t(L),2);l(U,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">setInterval</span><span style="color:#24292E">(changeImage, </span><span style="color:#005CC5">2000</span><span style="color:#24292E">);</span></span></code></pre>'),p(L),p(x);var $=s(x,2);i($,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">const</span><span style="color:#005CC5"> imageNode</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'#diapo'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> changeImage</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> randomId</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">ceil</span><span style="color:#24292E">(Math.</span><span style="color:#6F42C1">random</span><span style="color:#24292E">() </span><span style="color:#D73A49">*</span><span style="color:#005CC5"> 500</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	imageNode.src </span><span style="color:#D73A49">=</span><span style="color:#032F62"> &#96;https://picsum.photos/id/$&#123;</span><span style="color:#24292E">randomId</span><span style="color:#032F62">&#125;/400/400&#96;</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"><span style="color:#6F42C1">setInterval</span><span style="color:#24292E">(changeImage, </span><span style="color:#005CC5">2000</span><span style="color:#24292E">);</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var _=s($,6);i(_,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">const</span><span style="color:#005CC5"> confidentialElements</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'.hidden'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">confidentialElements.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">element</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">	element.style.backgroundColor </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'black'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">&#125;);</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var w=s(_,12);l(w,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6A737D">// prettier-ignore</span></span>
<span class="line"><span style="color:#D73A49">const</span><span style="color:#005CC5"> emojis</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> [ </span><span style="color:#032F62">'⛔️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'❇️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🏰'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🐺'</span><span style="color:#24292E">, </span><span style="color:#032F62">'⚜'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😅'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚳'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🕞'</span><span style="color:#24292E">, </span><span style="color:#032F62">'❣'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🏬'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🛎'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌕'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌃'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🏡'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🎑'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🍯'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🐍'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🔕'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🐿'</span><span style="color:#24292E">, </span><span style="color:#032F62">'💮'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😹'</span><span style="color:#24292E">, </span><span style="color:#032F62">'↕️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌵'</span><span style="color:#24292E">, </span><span style="color:#032F62">'♒️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚽'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🕋'</span><span style="color:#24292E">, </span><span style="color:#032F62">'📔'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🛂'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🎒'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🐼'</span><span style="color:#24292E">, </span><span style="color:#032F62">'♏️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'⏸'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🅰️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌈'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌂'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚣'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🎇'</span><span style="color:#24292E">, </span><span style="color:#032F62">'❄️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'👙'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌹'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🍸'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🛳'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🎟'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😱'</span><span style="color:#24292E">,  </span><span style="color:#032F62">'👳'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😑'</span><span style="color:#24292E">, </span><span style="color:#032F62">'⌚️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'💛'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🆚'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🔼'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🈯️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'☀️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😳'</span><span style="color:#24292E">, </span><span style="color:#032F62">'♊️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌖'</span><span style="color:#24292E">, </span><span style="color:#032F62">'♋️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚀'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚱'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚊'</span><span style="color:#24292E">, </span><span style="color:#032F62">'📿'</span><span style="color:#24292E">, </span><span style="color:#032F62">'⏫'</span><span style="color:#24292E">, </span><span style="color:#032F62">'9️⃣'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🗾'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🏜'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🍦'</span><span style="color:#24292E">, </span><span style="color:#032F62">'✋'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🍀'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🗿'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🙎'</span><span style="color:#24292E">, </span><span style="color:#032F62">'✖️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🆕'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🎮'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🔒'</span><span style="color:#24292E">, </span><span style="color:#032F62">'💸'</span><span style="color:#24292E">, </span><span style="color:#032F62">'👲'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🏢'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🔑'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🐶'</span><span style="color:#24292E">, </span><span style="color:#032F62">'👪'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😻'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌼'</span><span style="color:#24292E">, </span><span style="color:#032F62">'👠'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🧀'</span><span style="color:#24292E">, </span><span style="color:#032F62">'👎'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🙌'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🐻'</span><span style="color:#24292E">,  </span><span style="color:#032F62">'👯'</span><span style="color:#24292E">,  </span><span style="color:#032F62">'😺'</span><span style="color:#24292E">, </span><span style="color:#032F62">'😈'</span><span style="color:#24292E">, </span><span style="color:#032F62">'💴'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🎾'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🚙'</span><span style="color:#24292E">, </span><span style="color:#032F62">'❤️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'♑️'</span><span style="color:#24292E">, </span><span style="color:#032F62">'🌲'</span><span style="color:#24292E">];</span></span></code></pre>`);var M=s(w,8);i(M,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> getRandomEmojis</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> randomEmojis</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> [];</span></span>
<span class="line"><span style="color:#D73A49">	while</span><span style="color:#24292E"> (randomEmojis.</span><span style="color:#005CC5">length</span><span style="color:#D73A49"> &#x3C;</span><span style="color:#005CC5"> 5</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> randomIndex</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">floor</span><span style="color:#24292E">(Math.</span><span style="color:#6F42C1">random</span><span style="color:#24292E">() </span><span style="color:#D73A49">*</span><span style="color:#24292E"> emojis.</span><span style="color:#005CC5">length</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> randomEmoji</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> emojis[randomIndex];</span></span>
<span class="line"><span style="color:#D73A49">		if</span><span style="color:#24292E"> (</span><span style="color:#D73A49">!</span><span style="color:#24292E">randomEmojis.</span><span style="color:#6F42C1">includes</span><span style="color:#24292E">(randomEmoji)) &#123;</span></span>
<span class="line"><span style="color:#24292E">			randomEmojis.</span><span style="color:#6F42C1">push</span><span style="color:#24292E">(randomEmoji);</span></span>
<span class="line"><span style="color:#24292E">		&#125;</span></span>
<span class="line"><span style="color:#24292E">	&#125;</span></span>
<span class="line"><span style="color:#D73A49">	return</span><span style="color:#24292E"> randomEmojis;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var k=s(M,10);i(k,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> displayCards</span><span style="color:#24292E">(</span><span style="color:#E36209">emojis</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> emojisContainer</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'ol#emoji-game'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	emojisContainer.innerHTML </span><span style="color:#D73A49">=</span><span style="color:#032F62"> ''</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	emojis.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">emoji</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> emojiNode</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">createElement</span><span style="color:#24292E">(</span><span style="color:#032F62">'li'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">		emojiNode.textContent </span><span style="color:#D73A49">=</span><span style="color:#24292E"> emoji;</span></span>
<span class="line"><span style="color:#24292E">		emojisNode.</span><span style="color:#6F42C1">appendChild</span><span style="color:#24292E">(emojiNode);</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var z=s(k,10);i(z,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> hideEmojis</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> emojiCards</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">querySelectorAll</span><span style="color:#24292E">(</span><span style="color:#032F62">'ol > li'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	emojiCards.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">emojiCard</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">		emojiCard.style.color </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'transparent'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var P=s(z,10);i(P,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> askQuestion</span><span style="color:#24292E">(</span><span style="color:#E36209">randomEmojis</span><span style="color:#24292E">) &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> randomIndex</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">floor</span><span style="color:#24292E">(Math.</span><span style="color:#6F42C1">random</span><span style="color:#24292E">() </span><span style="color:#D73A49">*</span><span style="color:#24292E"> randomEmojis.</span><span style="color:#005CC5">length</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> randomEmoji</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> randomEmojis[randomIndex];</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> answer</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> prompt</span><span style="color:#24292E">(</span><span style="color:#032F62">&#96;Sous quelle carte se trouve l'emoji $&#123;</span><span style="color:#24292E">randomEmoji</span><span style="color:#032F62">&#125; ?&#96;</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#D73A49">	if</span><span style="color:#24292E"> (Number.</span><span style="color:#6F42C1">parseInt</span><span style="color:#24292E">(answer) </span><span style="color:#D73A49">===</span><span style="color:#24292E"> randomIndex) &#123;</span></span>
<span class="line"><span style="color:#6A737D">		// Ajoute la classe success pour lancer l'animation CSS</span></span>
<span class="line"><span style="color:#24292E">		document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'ol#emoji-game'</span><span style="color:#24292E">).classList.</span><span style="color:#6F42C1">add</span><span style="color:#24292E">(</span><span style="color:#032F62">'success'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#6A737D">		// Affiche un message de félicitation</span></span>
<span class="line"><span style="color:#24292E">		document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'#emoji-game-message'</span><span style="color:#24292E">).textContent </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'Bravo 🎉 !'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125; </span><span style="color:#D73A49">else</span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#6F42C1">		displayCards</span><span style="color:#24292E">(randomEmojis);</span></span>
<span class="line"><span style="color:#24292E">		document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'#emoji-game-message'</span><span style="color:#24292E">).textContent </span><span style="color:#D73A49">=</span><span style="color:#032F62"> 'Perdu 😔'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">	&#125;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}});var A=s(P,4),T=s(t(A),2),J=s(t(T),2);l(J,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">setTimeout</span><span style="color:#24292E">(hideEmojis, </span><span style="color:#005CC5">5000</span><span style="color:#24292E">);</span></span></code></pre>'),p(T),d(4),p(A);var Q=s(A,2);i(Q,{children:(a,r)=>{var e=u(),o=c(e);l(o,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> startGame</span><span style="color:#24292E">() &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> emojis</span><span style="color:#D73A49"> =</span><span style="color:#6F42C1"> getRandomEmojis</span><span style="color:#24292E">();</span></span>
<span class="line"><span style="color:#6F42C1">	displayEmojis</span><span style="color:#24292E">(emojis);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1">	setTimeout</span><span style="color:#24292E">(hideEmojis, </span><span style="color:#005CC5">5000</span><span style="color:#24292E">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1">	setTimeout</span><span style="color:#24292E">(() </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#6F42C1">		askQuestion</span><span style="color:#24292E">(emojis);</span></span>
<span class="line"><span style="color:#24292E">	&#125;, </span><span style="color:#005CC5">5100</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),n(a,e)},$$slots:{default:!0}}),d(4),n(F,g),K()}export{be as component};
