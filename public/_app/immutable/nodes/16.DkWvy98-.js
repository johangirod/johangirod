import{a as p,e as X,t as d,c as C}from"../chunks/B4pklceG.js";import"../chunks/CMei0t4b.js";import{M as s,f as c,N as n,n as i,O as o,$ as Y}from"../chunks/Du4uIILg.js";import{h as K}from"../chunks/CU3E0FLs.js";import{h as l}from"../chunks/Cs1o_ong.js";import{M as P}from"../chunks/DyuDGlf2.js";import{S as f}from"../chunks/OjqImkSQ.js";import{R as Z}from"../chunks/Dayddfh2.js";import{s as ss}from"../chunks/BMkXc6el.js";const es=""+new URL("../assets/process.DH4YfBRW.jpg",import.meta.url).href;var as=X(`<section><h1>Introduction √† Typescript</h1> <h2 class="text-pink-500">Technologie web 3</h2> <p class="text-gray-500">Johan Girod</p></section> <section><section><h2>Petit rappel</h2> <p class="text-xl">Javascript est un langage <strong>interpr√©t√©...</strong></p> <p class="fragment text-xl">...et <strong>sans typage statique</strong></p> <pre class="fragment"><code class="language-js" data-trim="" data-line-numbers=""><script type="text/template">
					function add(a, b) {
						return a + b;
					}
					const result = add([1], (x) => x + 1);
				<\/script><!----></code></pre> <aside class="notes"><p>Que veut dire interpr√©t√© ?</p> <ul><li>Le code est ex√©cut√© √† la vol√©e par un interpr√©teur (le navigateur)</li> <li>Par d√©faut, le code n'est pas compil√© en amont (le code qui est √©crit dans votre √©diteur
					est celui envoy√© au navigateur)</li> <li>Pas de v√©rification en amont</li></ul> <p>Que veut dire sans typage statique ?</p> <ul><li>Cela veut dire que le seul moyen de d√©tecter des erreurs de type est d'executer le
					programme</li></ul></aside></section> <section><p>üí• Cela pose probl√®me pour la <strong>maintenabilit√©</strong> et la <strong>robustesse</strong> des bases de codes.</p> <aside class="notes"><p>Maintenabilit√© : C'est la capacit√© d'un logiciel √† √™tre modifi√© facilement.</p> <p>Robustesse : C'est la capacit√© d'un logiciel √† fonctionner correctement dans toutes les
				conditions.</p> <p>En gros, moins de type, plus de bug non rep√©r√©s</p></aside></section> <section><h2>Typescript</h2> <h3><a href="https://www.typescriptlang.org/">typescriptlang.org</a></h3> <ul><li>Langage de programmation open-source d√©velopp√© par Microsoft</li> <li>Sur-ensemble de Javascript</li> <li>Permet de v√©rifier que le typage est bon</li> <li>Est compil√© en Javascript</li></ul> <div class="fragment"><hr> <pre><code class="language-js" data-trim="" data-line-numbers="1-3|5-7"><script type="text/template">
						const a = 6 - '12'; // Ce code ne compile pas en Typescript
					<\/script><!----></code></pre></div> <aside class="notes"><p>Pourquoi le code en exemple ne compile pas ?</p> <p>Aujourd'hui, quasiment tous les nouveaux projets JS utilisent Typescript.</p></aside></section> <section><h2>Typescript dans un projet</h2> <img alt="processus de compilation de typescript"> <aside class="notes"><ul><li>Typescript est un compilateur, qui prend des fichiers \`.ts\` en entr√©e</li> <li>Ce compilateur est lanc√© dans votre IDE et affiche les erreurs de compilation au fur et √†
					mesure</li> <li>Lorsque vous souhaitez publier votre projet, vous lancez la compilation pour g√©n√©rer les
					fichier JS sans les annotations de type</li> <li>Il est possible de sp√©cifier des options au compilateur dans un fichier tsconfig.json</li></ul></aside></section></section> <section><section><h2>Syntaxe : d√©claration</h2> <pre><code class="language-js" data-trim="" data-line-numbers="1-2|4-7|9-12"><script type="text/template">
					// D√©claration de variable
					const a: number = 5;

					// D√©claration de fonction
					function sayHello(name: string): string {
						return \`Hello \${name}\`;
					}

					// D√©claration de fonction anonymes (function fl√©ch√©es)
					const printValue = (value: number): void => {
						console.log(value);
					};
				<\/script><!----></code></pre> <p>Types de base : <code>number</code>, <code>string</code>, <code>boolean</code>, <code>void</code>, <code>undefined</code>, <code>null</code> et <code>void</code></p></section> <section><h2>Syntaxe : type alias et union</h2> <pre><code class="language-js" data-trim="" data-line-numbers="1-2|4-6"><script type="text/template">
					// Type alias
					type NumberOrString = number | string;

					function printValue(value: NumberOrString): void {
						console.log(value);
					}
				<\/script><!----></code></pre></section> <section><h2>Syntaxe : classes</h2> <pre><code class="language-js" data-trim="" data-line-numbers="3|4|6|1-14|16-18"><script type="text/template">
					// D√©claration
					class Person {
						private name: string;
						private age: number | undefined;

						constructor(name: string, age?: number) {
							this.name = name;
							this.age = age;
						}

						public sayHello(): string {
							return \`Hello \${this.name}\`;
						}
					}

					// Affectation
					const person: Person = new Person('Sarah', 25);
				<\/script><!----></code></pre> <p>Il est possible de pr√©ciser des interfaces</p></section> <section><h2>Tableau et tuple</h2> <pre><code class="language-js" data-trim="" data-line-numbers=""><script type="text/template">
					// Tableau
					const numbers: Array<number> = [1, 2, 3]; // Tableau de nombre

					// Tuple
					const tuple: [boolean, boolean] = [true, false];
				<\/script><!----></code></pre> <pre class="fragment"><code class="language-js" data-trim="" data-line-numbers="1-5"><script type="text/template">
					const tuple: [string, number] = ['test']; // Erreur
				<\/script><!----></code></pre> <aside class="notes">Quel est la diff√©rence entre tableau et tuple ?</aside></section> <section><h2>Objets</h2> <pre><code class="language-js" data-trim="" data-line-numbers="1-6|8-10"><script type="text/template">
					// Objets
					type Personne = {
						id: number;
						name: string;
						birthDate?: Date;
					};

					function sayHello(person: Personne): string {
						return \`Hello \${person.name}\`;
					}
				<\/script><!----></code></pre> <aside class="notes"><ul><li>Personne est un type alias</li> <li>Attention, on termine avec le point virgule</li></ul></aside></section> <section><h2>Dictionnaire</h2> <p>Les dictionnaires sont une structure de donn√©e qui associe une <strong>cl√©</strong> √† <strong>une valeur</strong></p> <pre><code class="language-js" data-trim="" data-line-numbers=""><script type="text/template">
					type ComptePr√©noms = Record<string, number>;

					const pr√©noms: ComptePr√©noms = {
						Alice: 1,
						Bob: 2,
						Charlie: 3
					};
				<\/script><!----></code></pre> <aside class="notes"><p>Quelle est la diff√©rence entre un objet et un dictionnaire ?</p> <ul><li>Les cl√©s d'un dictionnaires ne sont pas connues √† l'avance</li> <li>Toutes les valeurs d'un dictionnaire sont du m√™me type</li> <li>Ce sont les m√™me objets en JS</li></ul></aside></section> <section><h2>Syntaxe - autres notions</h2> <ol><li><a href="https://www.typescriptlang.org/fr/docs/handbook/modules/reference.html">Exporter et importer des types</a></li> <li><a href="https://www.typescriptlang.org/fr/docs/handbook/utility-types.html">Helpers de types (\`Exclude\`, \`NonNullable\`, \`Parameter\`, ...)</a></li> <li><a href="https://www.typescriptlang.org/fr/docs/handbook/2/generics">Types g√©n√©riques</a></li></ol></section></section> <section><h2>√Ä vous de jouer !</h2></section>`,1);function ns(g){var u=as(),m=s(c(u),2),y=s(n(m),6),h=s(n(y),2);ss(h,"src",es),i(2),o(y),o(m),i(4),p(g,u)}var os=d('<p>Ce fichier de configuration permet de d√©finir les options de compilation de typescript pour le projet courant.</p> <ul><li><code>target</code> : version de javascript cible</li> <li><code>module</code> : on pr√©cise le syst√®me de module utilis√©</li> <li><code>outDir</code> : r√©pertoire de sortie o√π seront plac√©s les fichiers js compil√©s</li> <li><code>rootDir</code> : r√©pertoire source</li> <li><code>strict</code> : active une verification plus stricte</li></ul> <p><a href="https://www.typescriptlang.org/tsconfig" rel="nofollow">En savoir plus</a></p>',1),ls=d('<div slot="title">`tsconfig.json`</div>'),ps=d("<p>Pour √©viter de lancer la commande <code>tsc</code> √† chaque modification, vous pouvez cr√©er un script <code>dev</code> qui surveille les modifications des fichiers et recompile automatiquement le projet.</p> <!>",1),ts=d('<div slot="title">Compiler automatiquement</div>'),rs=d(`<ul><li>Pour <strong>cr√©er un √©l√©ment HTML</strong>, on utilise la m√©thode <a href="https://developer.mozilla.org/fr/docs/Web/API/Document/createElement" rel="nofollow"><code>document.createElement('div')</code></a></li> <li>Pour <strong>ajouter un √©l√©ment</strong> √† un autre, on utilise la m√©thode <a href="https://developer.mozilla.org/fr/docs/Web/API/Node/appendChild" rel="nofollow"><code>myDomNode.appendChild(myElement)</code></a></li> <li>Pour <strong>ajouter une classe</strong> √† un √©l√©ment, on utilise la propri√©t√© <a href="https://developer.mozilla.org/fr/docs/Web/API/Element/classList" rel="nofollow"><code>classList.add()</code></a></li> <li>Pour <strong>r√©cup√©rer un √©l√©ment du DOM</strong>, on utilise la m√©thode <a href="https://developer.mozilla.org/fr/docs/Web/API/Document/querySelector" rel="nofollow"><code>document.querySelector(mySelector)</code></a></li> <li>Pour <strong>supprimer un √©l√©ment</strong>, on utilise la m√©thode <a href="https://developer.mozilla.org/fr/docs/Web/API/ChildNode/remove" rel="nofollow"><code>remove()</code></a></li></ul>`),cs=d('<div slot="title">Rappel</div>'),is=d(`<!> <h2>TP 1 - Ajouter des types √† un projet existant</h2> <p>Dans ce TP, nous allons ajouter des types √† un projet existant pour am√©liorer la lisibilit√© du code et √©viter des erreurs.</p> <h3>Mise en place</h3> <ol><li><p>Clonez le d√©p√¥t</p> <!></li> <li><p>Lancer</p> <!></li> <li><p>Ouvrez vscode √† la racine du projet</p> <!></li> <li><p>Ouvrez le fichier <code>exercice-1.js</code>. Normalement, votre √©diteur doit signaler que des types sont manquants en souligant en rouge les endroits √† compl√©ter.</p></li> <li><p>Ajouter les types pour corriger les erreurs.</p></li></ol> <h2>TP 2 - Memory</h2> <h3>Partie 1 - Initialisation du projet from scratch</h3> <ol><li><p>Cr√©ez un nouveau projet dans un nouveau r√©pertoire nomm√© <code>memory</code></p> <!></li> <li><p>Installez typescript comme d√©pendance du projet</p> <!></li> <li><p>Cr√©ez un fichier <code>tsconfig.json</code> √† la racine du projet</p> <!></li></ol> <!> <ol start="4"><li><p>Cr√©ez un r√©pertoire <code>src</code> et un fichier <code>index.ts</code></p> <!> <p>Le fichier <code>index.ts</code> contiendra le code de l‚Äôapplication. Pour l‚Äôinstant, vous pouvez ajouter un simple <code>console.log('Hello World')</code> pour tester la compilation.</p></li> <li><p>Cr√©er un fichier <code>index.html</code> √† la racine du projet</p> <!></li> <li><p>Ajoutez un script dans le fichier <code>package.json</code> pour lancer le compilateur typescript <code>tsc</code>. Ce script sera ex√©cut√© avec la commande <code>npm run build</code>.</p> <!></li> <li><p>Lancez la compilation avec la commande <code>npm run build</code>. Vous devriez voir un fichier <code>index.js</code> g√©n√©r√© dans le r√©pertoire <code>dist</code>. Ouvrez-le. Que constatez-vous ?</p></li> <li><p>Ajoutez une balise <code>script</code> dans le HTML pour charger le fichier <code>index.js</code> g√©n√©r√© par typescript (dans le r√©pertoire <code>dist</code>).</p></li> <li><p>Ouvrez le fichier <code>index.html</code> dans un navigateur pour v√©rifier que le message <code>Hello World</code> s‚Äôaffiche dans la console.</p></li></ol> <h3>Partie 2 - Cr√©ation d‚Äôun jeu de memory simple</h3> <!> <ol><li><p>Cr√©er un type <code>Carte</code> pour une carte de memory. Une carte poss√®de un symbole et un √©tat (retourn√©e ou non).
Les symboles possibles sont les emojis suivantes : üçé, üçå, üçí, üçì, üçá, üçâ, üçä, üçç</p> <!></li> <li><p>Cr√©er une fonction <code>creerJeu</code> qui retourne un tableau de cartes m√©lang√©es. Ce tablau doit contenir 2 cartes de chaque symbole, soit 16 cartes au total.</p> <!></li> <li><p>Cr√©er une fonction <code>afficherCarte</code> qui prend en param√®tre un tableau de cartes et l‚Äôaffiche dans l‚Äôinterface du navigateur, sous forme d‚Äôun tableau de 4 lignes et 4 colonnes. Les cartes retourn√©es doivent afficher leur symbole, les cartes cach√©es doivent afficher un espace.</p> <p>Tester que votre fonction affiche correctement les cartes en appelant la fonction <code>afficherCarte(jeuEnCours)</code>. Puis, changer passer l‚Äô√©tat de quelques cartes de ¬´ cach√© ¬ª √† ¬´ visible ¬ª et v√©rifier que l‚Äôaffichage est correct.</p> <!> <p><strong>Proposition de CSS</strong></p> <p><em>√Ä ajouter dans un fichier <code>style.css</code> √† la racine du projet, puis √† inclure dans le fichier <code>index.html</code> avec une balise <code>link</code>.</em></p> <!> <!></li> <li><p>La suite au <a href="/cours/tw3/2-async">TP suivant</a>.</p></li></ol>`,1);function vs(g){var u=is();K(a=>{Y.title="Typescript - TW3 - Johan Girod"});var m=c(u);Z(m,{children:(a,t)=>{ns(a)},$$slots:{default:!0}});var y=s(m,8),h=n(y),I=s(n(h),2);l(I,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">  git</span><span style="color:#032F62"> clone</span><span style="color:#032F62"> https://sources.univ-jfc.fr/techno-web-3/tp-1.git</span></span>
<span class="line"><span style="color:#005CC5">  cd</span><span style="color:#032F62"> tp-1</span></span></code></pre>`),o(h);var E=s(h,2),M=s(n(E),2);l(M,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">  npm</span><span style="color:#032F62"> install</span></span></code></pre>'),o(E);var $=s(E,2),J=s(n($),2);l(J,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">  code</span><span style="color:#032F62"> .</span></span></code></pre>'),o($),i(4),o(y);var v=s(y,6),b=n(v),O=s(n(b),2);l(O,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">   npm</span><span style="color:#032F62"> init</span><span style="color:#005CC5"> -y</span></span></code></pre>'),o(b);var F=s(b,2),N=s(n(F),2);l(N,()=>'<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">   npm</span><span style="color:#032F62"> install</span><span style="color:#005CC5"> -D</span><span style="color:#032F62"> typescript</span></span></code></pre>'),o(F);var k=s(F,2),W=s(n(k),2);l(W,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">&#123;</span></span>
<span class="line"><span style="color:#005CC5">	"compilerOptions"</span><span style="color:#24292E">: &#123;</span></span>
<span class="line"><span style="color:#005CC5">		"target"</span><span style="color:#24292E">: </span><span style="color:#032F62">"ES6"</span><span style="color:#24292E">,</span></span>
<span class="line"><span style="color:#005CC5">		"module"</span><span style="color:#24292E">: </span><span style="color:#032F62">"ES6"</span><span style="color:#24292E">,</span></span>
<span class="line"><span style="color:#005CC5">		"outDir"</span><span style="color:#24292E">: </span><span style="color:#032F62">"./dist"</span><span style="color:#24292E">,</span></span>
<span class="line"><span style="color:#005CC5">		"rootDir"</span><span style="color:#24292E">: </span><span style="color:#032F62">"./src"</span><span style="color:#24292E">,</span></span>
<span class="line"><span style="color:#005CC5">		"strict"</span><span style="color:#24292E">: </span><span style="color:#005CC5">true</span></span>
<span class="line"><span style="color:#24292E">	&#125;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),o(k),o(v);var w=s(v,2);P(w,{children:(a,t)=>{var e=os();i(4),p(a,e)},$$slots:{default:!0,title:(a,t)=>{var e=ls();p(a,e)}}});var x=s(w,2),A=n(x),R=s(n(A),2);l(R,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">   mkdir</span><span style="color:#032F62"> src</span></span>
<span class="line"><span style="color:#6F42C1">   touch</span><span style="color:#032F62"> src/index.ts</span></span></code></pre>`),i(2),o(A);var D=s(A,2),Q=s(n(D),2);l(Q,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">&#x3C;!</span><span style="color:#22863A">doctype</span><span style="color:#6F42C1"> html</span><span style="color:#24292E">></span></span>
<span class="line"><span style="color:#24292E">&#x3C;</span><span style="color:#22863A">html</span><span style="color:#6F42C1"> lang</span><span style="color:#24292E">=</span><span style="color:#032F62">"en"</span><span style="color:#24292E">></span></span>
<span class="line"><span style="color:#24292E">	&#x3C;</span><span style="color:#22863A">head</span><span style="color:#24292E">></span></span>
<span class="line"><span style="color:#24292E">		&#x3C;</span><span style="color:#22863A">meta</span><span style="color:#6F42C1"> charset</span><span style="color:#24292E">=</span><span style="color:#032F62">"UTF-8"</span><span style="color:#24292E"> /></span></span>
<span class="line"><span style="color:#24292E">		&#x3C;</span><span style="color:#22863A">meta</span><span style="color:#6F42C1"> http-equiv</span><span style="color:#24292E">=</span><span style="color:#032F62">"X-UA-Compatible"</span><span style="color:#6F42C1"> content</span><span style="color:#24292E">=</span><span style="color:#032F62">"IE=edge"</span><span style="color:#24292E"> /></span></span>
<span class="line"><span style="color:#24292E">		&#x3C;</span><span style="color:#22863A">meta</span><span style="color:#6F42C1"> name</span><span style="color:#24292E">=</span><span style="color:#032F62">"viewport"</span><span style="color:#6F42C1"> content</span><span style="color:#24292E">=</span><span style="color:#032F62">"width=device-width, initial-scale=1.0"</span><span style="color:#24292E"> /></span></span>
<span class="line"><span style="color:#24292E">		&#x3C;</span><span style="color:#22863A">title</span><span style="color:#24292E">>Memory&#x3C;/</span><span style="color:#22863A">title</span><span style="color:#24292E">></span></span>
<span class="line"><span style="color:#24292E">	&#x3C;/</span><span style="color:#22863A">head</span><span style="color:#24292E">></span></span>
<span class="line"><span style="color:#24292E">&#x3C;/</span><span style="color:#22863A">html</span><span style="color:#24292E">></span></span></code></pre>`),o(D);var q=s(D,2),U=s(n(q),2);f(U,{children:(a,t)=>{var e=C(),r=c(e);l(r,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">  ...</span></span>
<span class="line"><span style="color:#032F62">  "scripts"</span><span style="color:#24292E">: &#123;</span></span>
<span class="line"><span style="color:#005CC5">    "build"</span><span style="color:#24292E">: </span><span style="color:#032F62">"tsc"</span></span>
<span class="line"><span style="color:#24292E">  &#125;</span></span>
<span class="line"></span></code></pre>`),p(a,e)},$$slots:{default:!0}}),o(q),i(6),o(x);var T=s(x,4);P(T,{children:(a,t)=>{var e=ps(),r=s(c(e),2);l(r,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#24292E">...</span></span>
<span class="line"><span style="color:#032F62">"scripts"</span><span style="color:#24292E">: &#123;</span></span>
<span class="line"><span style="color:#005CC5">  "dev"</span><span style="color:#24292E">: </span><span style="color:#032F62">"tsc --watch"</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),p(a,e)},$$slots:{default:!0,title:(a,t)=>{var e=ts();p(a,e)}}});var z=s(T,2),_=n(z),G=s(n(_),2);f(G,{children:(a,t)=>{var e=C(),r=c(e);l(r,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">type</span><span style="color:#6F42C1"> Emoji</span><span style="color:#D73A49"> =</span><span style="color:#032F62"> 'üçé'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçå'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçí'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçì'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçá'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçâ'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçä'</span><span style="color:#D73A49"> |</span><span style="color:#032F62"> 'üçç'</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#D73A49">type</span><span style="color:#6F42C1"> Carte</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#E36209">	symbole</span><span style="color:#D73A49">:</span><span style="color:#6F42C1"> Emoji</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#E36209">	visible</span><span style="color:#D73A49">:</span><span style="color:#005CC5"> boolean</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">&#125;;</span></span></code></pre>`),p(a,e)},$$slots:{default:!0}}),o(_);var j=s(_,2),V=s(n(j),2);f(V,{children:(a,t)=>{var e=C(),r=c(e);l(r,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">const</span><span style="color:#005CC5"> symboles</span><span style="color:#D73A49">:</span><span style="color:#6F42C1"> Array</span><span style="color:#24292E">&#x3C;</span><span style="color:#6F42C1">Emoji</span><span style="color:#24292E">> </span><span style="color:#D73A49">=</span><span style="color:#24292E"> [</span><span style="color:#032F62">'üçé'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçå'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçí'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçì'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçá'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçâ'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçä'</span><span style="color:#24292E">, </span><span style="color:#032F62">'üçç'</span><span style="color:#24292E">];</span></span>
<span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> creerJeu</span><span style="color:#24292E">()</span><span style="color:#D73A49">:</span><span style="color:#6F42C1"> Array</span><span style="color:#24292E">&#x3C;</span><span style="color:#6F42C1">Carte</span><span style="color:#24292E">> &#123;</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> cartes</span><span style="color:#D73A49">:</span><span style="color:#6F42C1"> Array</span><span style="color:#24292E">&#x3C;</span><span style="color:#6F42C1">Carte</span><span style="color:#24292E">> </span><span style="color:#D73A49">=</span><span style="color:#24292E"> [];</span></span>
<span class="line"><span style="color:#24292E">	symboles.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">symbole</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">		cartes.</span><span style="color:#6F42C1">push</span><span style="color:#24292E">(&#123; symbole, visible: </span><span style="color:#005CC5">false</span><span style="color:#24292E"> &#125;);</span></span>
<span class="line"><span style="color:#24292E">		cartes.</span><span style="color:#6F42C1">push</span><span style="color:#24292E">(&#123; symbole, visible: </span><span style="color:#005CC5">false</span><span style="color:#24292E"> &#125;);</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#D73A49">	return</span><span style="color:#24292E"> cartes.</span><span style="color:#6F42C1">sort</span><span style="color:#24292E">(() </span><span style="color:#D73A49">=></span><span style="color:#24292E"> Math.</span><span style="color:#6F42C1">random</span><span style="color:#24292E">() </span><span style="color:#D73A49">-</span><span style="color:#005CC5"> 0.5</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),p(a,e)},$$slots:{default:!0}}),o(j);var S=s(j,2),L=s(n(S),4);P(L,{children:(a,t)=>{var e=rs();p(a,e)},$$slots:{default:!0,title:(a,t)=>{var e=cs();p(a,e)}}});var H=s(L,6);l(H,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#6F42C1">.carte-container</span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#005CC5">	display</span><span style="color:#24292E">: </span><span style="color:#005CC5">grid</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	grid-template-columns</span><span style="color:#24292E">: </span><span style="color:#005CC5">repeat</span><span style="color:#24292E">(</span><span style="color:#005CC5">4</span><span style="color:#24292E">, </span><span style="color:#005CC5">1</span><span style="color:#D73A49">fr</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#005CC5">	grid-template-rows</span><span style="color:#24292E">: </span><span style="color:#005CC5">repeat</span><span style="color:#24292E">(</span><span style="color:#005CC5">4</span><span style="color:#24292E">, </span><span style="color:#005CC5">1</span><span style="color:#D73A49">fr</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#005CC5">	width</span><span style="color:#24292E">: </span><span style="color:#005CC5">fit-content</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	gap</span><span style="color:#24292E">: </span><span style="color:#005CC5">5</span><span style="color:#D73A49">px</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span>
<span class="line"><span style="color:#6F42C1">.carte</span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#005CC5">	width</span><span style="color:#24292E">: </span><span style="color:#005CC5">50</span><span style="color:#D73A49">px</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	height</span><span style="color:#24292E">: </span><span style="color:#005CC5">50</span><span style="color:#D73A49">px</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	border</span><span style="color:#24292E">: </span><span style="color:#005CC5">1</span><span style="color:#D73A49">px</span><span style="color:#005CC5"> solid</span><span style="color:#005CC5"> black</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	display</span><span style="color:#24292E">: </span><span style="color:#005CC5">flex</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	justify-content</span><span style="color:#24292E">: </span><span style="color:#005CC5">center</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	align-items</span><span style="color:#24292E">: </span><span style="color:#005CC5">center</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	font-size</span><span style="color:#24292E">: </span><span style="color:#005CC5">2</span><span style="color:#D73A49">rem</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#005CC5">	border-radius</span><span style="color:#24292E">: </span><span style="color:#005CC5">5</span><span style="color:#D73A49">px</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`);var B=s(H,2);f(B,{children:(a,t)=>{var e=C(),r=c(e);l(r,()=>`<pre class="shiki github-light" style="background-color:#fff;color:#24292e" tabindex="0"><code><span class="line"><span style="color:#D73A49">function</span><span style="color:#6F42C1"> afficherCarte</span><span style="color:#24292E">(</span><span style="color:#E36209">cartes</span><span style="color:#D73A49">:</span><span style="color:#6F42C1"> Array</span><span style="color:#24292E">&#x3C;</span><span style="color:#6F42C1">Carte</span><span style="color:#24292E">>)</span><span style="color:#D73A49">:</span><span style="color:#005CC5"> void</span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#24292E">	document.</span><span style="color:#6F42C1">querySelector</span><span style="color:#24292E">(</span><span style="color:#032F62">'.carte-container'</span><span style="color:#24292E">)?.</span><span style="color:#6F42C1">remove</span><span style="color:#24292E">();</span></span>
<span class="line"><span style="color:#D73A49">	const</span><span style="color:#005CC5"> container</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">createElement</span><span style="color:#24292E">(</span><span style="color:#032F62">'div'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	container.classList.</span><span style="color:#6F42C1">add</span><span style="color:#24292E">(</span><span style="color:#032F62">'carte-container'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">	document.body.</span><span style="color:#6F42C1">appendChild</span><span style="color:#24292E">(container);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E">	cartes.</span><span style="color:#6F42C1">forEach</span><span style="color:#24292E">((</span><span style="color:#E36209">carte</span><span style="color:#24292E">) </span><span style="color:#D73A49">=></span><span style="color:#24292E"> &#123;</span></span>
<span class="line"><span style="color:#D73A49">		const</span><span style="color:#005CC5"> button</span><span style="color:#D73A49"> =</span><span style="color:#24292E"> document.</span><span style="color:#6F42C1">createElement</span><span style="color:#24292E">(</span><span style="color:#032F62">'button'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">		button.classList.</span><span style="color:#6F42C1">add</span><span style="color:#24292E">(</span><span style="color:#032F62">'carte'</span><span style="color:#24292E">);</span></span>
<span class="line"><span style="color:#24292E">		button.textContent </span><span style="color:#D73A49">=</span><span style="color:#24292E"> carte.visible </span><span style="color:#D73A49">?</span><span style="color:#24292E"> carte.symbole </span><span style="color:#D73A49">:</span><span style="color:#032F62"> ' '</span><span style="color:#24292E">;</span></span>
<span class="line"><span style="color:#24292E">		container.</span><span style="color:#6F42C1">appendChild</span><span style="color:#24292E">(button);</span></span>
<span class="line"><span style="color:#24292E">	&#125;);</span></span>
<span class="line"><span style="color:#24292E">&#125;</span></span></code></pre>`),p(a,e)},$$slots:{default:!0}}),o(S),i(2),o(z),p(g,u)}export{vs as component};
